{
    "version": "https://jsonfeed.org/version/1",
    "title": "sxq",
    "description": "",
    "home_page_url": "https://sxq2003.github.io",
    "items": [
        {
            "id": "https://sxq2003.github.io/2024/04/07/%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E7%9A%84LWE/",
            "url": "https://sxq2003.github.io/2024/04/07/%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E7%9A%84LWE/",
            "title": "一道经典的LWE",
            "date_published": "2024-04-07T01:16:12.000Z",
            "content_html": "<h1 id=\"problem\">Problem</h1>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> secret <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gravity</span>(<span class=\"params\">n,d=<span class=\"number\">0.25</span></span>):</span><br><span class=\"line\">    A=np.zeros([n,n])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            A[i,j]=d/n*(d**<span class=\"number\">2</span>+((i-j)/n)**<span class=\"number\">2</span>)**(-<span class=\"number\">1.5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A</span><br><span class=\"line\"> </span><br><span class=\"line\">n=<span class=\"built_in\">len</span>(flag)</span><br><span class=\"line\">A=gravity(n)</span><br><span class=\"line\">x=np.array(<span class=\"built_in\">list</span>(flag))</span><br><span class=\"line\">b=A@x</span><br><span class=\"line\">np.savetxt(<span class=\"string\">&#x27;b.txt&#x27;</span>,b)</span><br></pre></td></tr></table></figure>\r\n<p>看似很简单，<span class=\"math inline\">\\(b=A*x\\)</span>，不就是个矩阵乘法嘛<span class=\"math inline\">\\(A、b\\)</span>都已知，直接<span class=\"math inline\">\\(x=b*A^{-1}\\)</span>不就好了。实则没这么简单。</p>\r\n<p>原因就在于<span class=\"math inline\">\\(A\\)</span>中的元素全都是浮点数，你回去会有精度损失，无法还原flag。这就需要我们把<span class=\"math inline\">\\(A\\)</span>中的元素放大(乘上一个很大的数，如<span class=\"math inline\">\\(10^{20}\\)</span>)，去掉小数点，但是这样处理之后会有误差，还要误差考虑进去，经典的LWE问题。</p>\r\n<p>设误差为<span class=\"math inline\">\\(s\\)</span>，则<span class=\"math inline\">\\(b+s=Ax\\)</span>，将LWE问题转换为SVP问题，因为<span class=\"math inline\">\\(A,b\\)</span>已知，<span class=\"math inline\">\\(s,x\\)</span>未知</p>\r\n<p>构造矩阵<span class=\"math inline\">\\(\\begin{pmatrix}A &amp; 0 \\\\ -b &amp; 1 \\end{pmatrix}\\)</span>作为基向量，有<span class=\"math inline\">\\(\\begin{pmatrix}x&amp;1 \\end{pmatrix}\\begin{pmatrix}A &amp; 0 \\\\ -b &amp; 1 \\end{pmatrix}=\\begin{pmatrix}s &amp; 1 \\end{pmatrix}\\)</span></p>\r\n<p>对<span class=\"math inline\">\\(\\begin{pmatrix}A &amp; 0 \\\\ -b &amp; 1 \\end{pmatrix}\\)</span>格基规约，利用LLL算法得到<span class=\"math inline\">\\(\\begin{pmatrix}s&amp; 1 \\end{pmatrix}\\)</span></p>\r\n<p>因此<span class=\"math inline\">\\(x=\\begin{pmatrix}s&amp; 1 \\end{pmatrix}\\begin{pmatrix}A &amp; 0 \\\\ -b &amp; 1 \\end{pmatrix}^{-1}\\)</span></p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gravity</span>(<span class=\"params\">n,d=<span class=\"number\">0.25</span></span>):</span><br><span class=\"line\">    A=np.zeros([n,n])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            A[i,j]=d/n*(d**<span class=\"number\">2</span>+((i-j)/n)**<span class=\"number\">2</span>)**(-<span class=\"number\">1.5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A</span><br><span class=\"line\"> </span><br><span class=\"line\">b = np.loadtxt(<span class=\"string\">&#x27;b.txt&#x27;</span>)</span><br><span class=\"line\">n = <span class=\"number\">85</span></span><br><span class=\"line\">multiple = <span class=\"number\">10</span> ^ <span class=\"number\">20</span></span><br><span class=\"line\">A = gravity(n)</span><br><span class=\"line\"> </span><br><span class=\"line\">A = [[<span class=\"built_in\">int</span>(j * multiple) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> A] <span class=\"comment\"># 乘上一个大数</span></span><br><span class=\"line\">b = [<span class=\"built_in\">int</span>(i * (-<span class=\"number\">1</span>) * multiple) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> b] <span class=\"comment\">#把b转换成-b</span></span><br><span class=\"line\">M = [A[i] + [<span class=\"number\">0</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">M.append(b + [<span class=\"number\">1</span>])</span><br><span class=\"line\">M = Matrix(ZZ, n + <span class=\"number\">1</span>, n + <span class=\"number\">1</span>, M) <span class=\"comment\">#构造基向量</span></span><br><span class=\"line\">ans = M.LLL()[<span class=\"number\">0</span>] <span class=\"comment\"># 格基规约</span></span><br><span class=\"line\"><span class=\"comment\"># print(ans)</span></span><br><span class=\"line\">flag = M.solve_left(ans)</span><br><span class=\"line\"><span class=\"comment\"># print(bytes(flag))</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(flag[:-<span class=\"number\">1</span>]).decode())</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "crypto",
                "lwe",
                "格"
            ]
        },
        {
            "id": "https://sxq2003.github.io/2024/03/08/Sage%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/",
            "url": "https://sxq2003.github.io/2024/03/08/Sage%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/",
            "title": "Sage常见函数用法",
            "date_published": "2024-03-08T03:42:14.000Z",
            "content_html": "<h1 id=\"solve_mod\">solve_mod</h1>\r\n<p>作用：解同余方程</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = var(&#x27;x&#x27;)</span><br><span class=\"line\">solve_mod([方程],模数)</span><br></pre></td></tr></table></figure>\r\n<p>如</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x, y = var(<span class=\"string\">&#x27;x,y&#x27;</span>)</span><br><span class=\"line\">mod = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(solve_mod(<span class=\"number\">2</span>*x + y == <span class=\"number\">3</span>, mod))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(solve_mod(<span class=\"number\">2</span>*x + y == <span class=\"number\">3</span>, mod, solution_dict = <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(solve_mod((<span class=\"number\">2</span>*x + y == <span class=\"number\">3</span>, x + <span class=\"number\">3</span>*y == <span class=\"number\">1</span>), mod))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(solve_mod((<span class=\"number\">2</span>*x + y == <span class=\"number\">3</span>, x + <span class=\"number\">3</span>*y == <span class=\"number\">1</span>), mod, solution_dict = <span class=\"literal\">True</span>))</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"discrete_log\">discrete_log</h1>\r\n<p>作用：求解离散对数问题</p>\r\n<p>例如</p>\r\n<p><span class=\"math inline\">\\(c =g^m(mod\\,p)\\)</span>，其中<span class=\"math inline\">\\(c,g,p\\)</span>已知，<span class=\"math inline\">\\(m\\)</span>未知</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m = discrete_log(mod(c,p),mod(g,p))</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"nth_root\">nth_root</h1>\r\n<p>作用：模数下开根</p>\r\n<p>例如</p>\r\n<p><span class=\"math inline\">\\(c = m^e(mod\\,n)\\)</span></p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m=Mod(c,n).nth_root(e, <span class=\"built_in\">all</span>=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"p.x-zz\">P.&lt;x&gt; = ZZ[]</h1>\r\n<p>作用：整数域下设未知数x</p>\r\n<p>例如</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">44538727182858207226040251762322467288176239968967952269350336889655421753182750730773886813281253762528207970314694060562016861614492626112150259048393048617529867598499261392152098087985858905944606287003243</span></span><br><span class=\"line\">enc = <span class=\"number\">37578889436345667053409195986387874079577521081198523844555524501835825138236698001996990844798291201187483119265306641889824719989940722147655181198458261772053545832559971159703922610578530282146835945192532</span></span><br><span class=\"line\"></span><br><span class=\"line\">P.&lt;k&gt; = ZZ[] </span><br><span class=\"line\">p = k** <span class=\"number\">6</span> + <span class=\"number\">7</span> *k** <span class=\"number\">4</span> - <span class=\"number\">40</span> *k** <span class=\"number\">3</span> + <span class=\"number\">12</span> *k** <span class=\"number\">2</span> - <span class=\"number\">114</span> *k + <span class=\"number\">31377</span></span><br><span class=\"line\">q = k** <span class=\"number\">5</span> - <span class=\"number\">8</span> *k** <span class=\"number\">4</span> + <span class=\"number\">19</span> *k** <span class=\"number\">3</span> - <span class=\"number\">313</span> *k** <span class=\"number\">2</span> - <span class=\"number\">14</span> *k + <span class=\"number\">14011</span></span><br><span class=\"line\">f = p * q - n </span><br><span class=\"line\">k = f.roots()[<span class=\"number\">0</span>][<span class=\"number\">0</span>] </span><br><span class=\"line\">p = ZZ(p(k)) </span><br><span class=\"line\">q = ZZ(q(k)) </span><br><span class=\"line\">d = inverse_mod( <span class=\"number\">31337</span>, (p- <span class=\"number\">1</span>)*(q- <span class=\"number\">1</span>)) </span><br><span class=\"line\">m = power_mod(enc, d, n) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"其他\">其他</h1>\r\n<h2 id=\"facx\">fac(x)</h2>\r\n<p><span class=\"math inline\">\\(x!\\)</span></p>\r\n<h2 id=\"modcn\">Mod(c,n)</h2>\r\n<p><span class=\"math inline\">\\(c\\)</span>在模<span class=\"math inline\">\\(n\\)</span>下的值</p>\r\n<h2 id=\"euler_phix\">euler_phi(x)</h2>\r\n<p><span class=\"math inline\">\\(x\\)</span>的欧拉函数</p>\r\n",
            "tags": [
                "-sage -crypto"
            ]
        }
    ]
}