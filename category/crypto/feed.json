{
    "version": "https://jsonfeed.org/version/1",
    "title": "sxq • All posts by \"crypto\" category",
    "description": "",
    "home_page_url": "https://sxq2003.github.io",
    "items": [
        {
            "id": "https://sxq2003.github.io/2024/11/11/Crypto%E5%A5%BD%E9%A2%98%E8%B5%8F%E6%9E%90/",
            "url": "https://sxq2003.github.io/2024/11/11/Crypto%E5%A5%BD%E9%A2%98%E8%B5%8F%E6%9E%90/",
            "title": "Crypto好题赏析",
            "date_published": "2024-11-11T08:33:12.000Z",
            "content_html": "<h1 id=\"d3factor\">d3factor</h1>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> bytes_to_long, getPrime</span><br><span class=\"line\"><span class=\"keyword\">from</span> secret <span class=\"keyword\">import</span> msg</span><br><span class=\"line\"><span class=\"keyword\">from</span> sympy <span class=\"keyword\">import</span> nextprime</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> invert</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"string\">&#x27;d3ctf&#123;&#x27;</span>+md5(msg).hexdigest()+<span class=\"string\">&#x27;&#125;&#x27;</span></span><br><span class=\"line\">p = getPrime(<span class=\"number\">256</span>)</span><br><span class=\"line\">q = getPrime(<span class=\"number\">256</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> p &gt; q</span><br><span class=\"line\">n = p * q</span><br><span class=\"line\">e = <span class=\"number\">0x10001</span></span><br><span class=\"line\">m = bytes_to_long(msg)</span><br><span class=\"line\">c = <span class=\"built_in\">pow</span>(m, e, n)</span><br><span class=\"line\"></span><br><span class=\"line\">N = <span class=\"built_in\">pow</span>(p, <span class=\"number\">7</span>) * q</span><br><span class=\"line\">phi = <span class=\"built_in\">pow</span>(p, <span class=\"number\">6</span>) * (p - <span class=\"number\">1</span>) * (q - <span class=\"number\">1</span>)</span><br><span class=\"line\">d1 = getPrime(<span class=\"number\">2000</span>)</span><br><span class=\"line\">d2 = nextprime(d1 + getPrime(<span class=\"number\">1000</span>))</span><br><span class=\"line\">e1 = invert(d1, phi)</span><br><span class=\"line\">e2 = invert(d2, phi)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;c = <span class=\"subst\">&#123;c&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;N = <span class=\"subst\">&#123;N&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;e1 = <span class=\"subst\">&#123;e1&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;e2 = <span class=\"subst\">&#123;e2&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">c = 2420624631315473673388732074340410215657378096737020976722603529598864338532404224879219059105950005655100728361198499550862405660043591919681568611707967</span></span><br><span class=\"line\"><span class=\"string\">N = 1476751427633071977599571983301151063258376731102955975364111147037204614220376883752032253407881568290520059515340434632858734689439268479399482315506043425541162646523388437842149125178447800616137044219916586942207838674001004007237861470176454543718752182312318068466051713087927370670177514666860822341380494154077020472814706123209865769048722380888175401791873273850281384147394075054950169002165357490796510950852631287689747360436384163758289159710264469722036320819123313773301072777844457895388797742631541101152819089150281489897683508400098693808473542212963868834485233858128220055727804326451310080791</span></span><br><span class=\"line\"><span class=\"string\">e1 = 425735006018518321920113858371691046233291394270779139216531379266829453665704656868245884309574741300746121946724344532456337490492263690989727904837374279175606623404025598533405400677329916633307585813849635071097268989906426771864410852556381279117588496262787146588414873723983855041415476840445850171457530977221981125006107741100779529209163446405585696682186452013669643507275620439492021019544922913941472624874102604249376990616323884331293660116156782891935217575308895791623826306100692059131945495084654854521834016181452508329430102813663713333608459898915361745215871305547069325129687311358338082029</span></span><br><span class=\"line\"><span class=\"string\">e2 = 1004512650658647383814190582513307789549094672255033373245432814519573537648997991452158231923692387604945039180687417026069655569594454408690445879849410118502279459189421806132654131287284719070037134752526923855821229397612868419416851456578505341237256609343187666849045678291935806441844686439591365338539029504178066823886051731466788474438373839803448380498800384597878814991008672054436093542513518012957106825842251155935855375353004898840663429274565622024673235081082222394015174831078190299524112112571718817712276118850981261489528540025810396786605197437842655180663611669918785635193552649262904644919</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"知识点\">知识点</h2>\r\n<p>$ N=p^rq形式 $</p>\r\n<h2 id=\"wp及扩展\">WP及扩展</h2>\r\n<p>在<a href=\"https://eprint.iacr.org/2015/399.pdf\">这篇论文</a>中，称<span class=\"math inline\">\\(N=p^r*q\\)</span>这种形式为<strong>Prime Power RSA</strong>，并讲了在以下三种情况下N能被分解：</p>\r\n<h3 id=\"定理一\">定理一</h3>\r\n<p><span class=\"math inline\">\\(N=p^r*q\\)</span>，且e满足存在x,y,z使得<span class=\"math inline\">\\(ex-\\phi(N)y=z\\)</span>，<span class=\"math inline\">\\(1&lt;e&lt;\\phi(N)\\)</span>，<span class=\"math inline\">\\(gcd(e,\\phi(N))=1\\)</span>，且其中<span class=\"math inline\">\\(|xz|&lt;N^{\\frac{r(r-1)}{(r+1)^2}}\\)</span>，则N在多项式时间内能被分解。</p>\r\n<p>也就是e与phi(N)比较接近的情况</p>\r\n<p>一个例子：</p>\r\n<p><img src=\"/2024/11/11/Crypto%E5%A5%BD%E9%A2%98%E8%B5%8F%E6%9E%90/1.png\"></p>\r\n<p>知道这些条件，我们该如何分解N？</p>\r\n<p>根据上面的结论，我们假设存在这样的等式<span class=\"math inline\">\\(ex-\\phi(N)y=z\\)</span>，其中我们只知道这里的e</p>\r\n<p>变形成这样<span class=\"math inline\">\\(ex-z\\equiv0(mod\\ p^{r-1})\\)</span>，目的是尽量化成coppersmith的形式然后求解</p>\r\n<p>把<span class=\"math inline\">\\(-z\\)</span>看做<span class=\"math inline\">\\(x_1\\)</span>，<span class=\"math inline\">\\(x\\)</span>看做<span class=\"math inline\">\\(x_2\\)</span>，就有一个在模<span class=\"math inline\">\\(p^{r-1}\\)</span>域下的二元方程<span class=\"math inline\">\\(f(x_1,x_2)=x_1+ex_2\\)</span>，由二元coppersmith定理可以求出<span class=\"math inline\">\\(f(x_1,x_2)\\equiv0(mod \\ p^{r-1})\\)</span>的两个解<span class=\"math inline\">\\(x_1=-11537,x_2=7053\\)</span></p>\r\n<p>最后<span class=\"math inline\">\\(p=gcd(x_1+ex_2,N)=2294269585934949239\\)</span></p>\r\n<h3 id=\"定理二\">定理二</h3>\r\n<p><span class=\"math inline\">\\(N=p^r*q\\)</span>，如果存在两个私钥<span class=\"math inline\">\\(d_1,d_2\\)</span>，满足<span class=\"math inline\">\\(|d_1-d_2|&lt;N^{\\frac{r(r-1)}{(r+1)^2}}\\)</span>，则N在多项式时间内能被分解。</p>\r\n<p>也就是d1,d2相差比较小的情况，很明显，我们这道题应用的就是这种方法</p>\r\n<p>题目已知：<span class=\"math inline\">\\(e_1d_1\\equiv1(mod\\ \\phi(N))\\)</span>，<span class=\"math inline\">\\(e_2d_2\\equiv1(mod\\ \\phi(N))\\)</span></p>\r\n<p>且<span class=\"math inline\">\\(|d_2-d_1|≈1000bits\\)</span>，r=7，带入可知满足<span class=\"math inline\">\\(|d_1-d_2|&lt;N^{\\frac{r(r-1)}{(r+1)^2}}\\)</span></p>\r\n<p>根据论文的思路，变换一下已知的两个等式</p>\r\n<p><span class=\"math inline\">\\(e_1e_2d_1\\equiv e_2(mod\\ \\phi(N))\\)</span>，<span class=\"math inline\">\\(e_1e_2d_2\\equiv e_1(mod\\ \\phi(N))\\)</span></p>\r\n<p>两式相减，得<span class=\"math inline\">\\(e_1e_2(d_2-d_1)\\equiv e_1-e_2(mod\\ \\phi(N))\\)</span></p>\r\n<p>设<span class=\"math inline\">\\(x=d_2-d_1\\)</span>，则<span class=\"math inline\">\\(e_1e_2x-(e_2-e_1)\\equiv 0(mod\\ \\phi(N))\\)</span>，用coppersmith求解</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sage</span></span><br><span class=\"line\">load(<span class=\"string\">&#x27;coppersmith.sage&#x27;</span>)</span><br><span class=\"line\">c = <span class=\"number\">2420624631315473673388732074340410215657378096737020976722603529598864338532404224879219059105950005655100728361198499550862405660043591919681568611707967</span></span><br><span class=\"line\">N = <span class=\"number\">1476751427633071977599571983301151063258376731102955975364111147037204614220376883752032253407881568290520059515340434632858734689439268479399482315506043425541162646523388437842149125178447800616137044219916586942207838674001004007237861470176454543718752182312318068466051713087927370670177514666860822341380494154077020472814706123209865769048722380888175401791873273850281384147394075054950169002165357490796510950852631287689747360436384163758289159710264469722036320819123313773301072777844457895388797742631541101152819089150281489897683508400098693808473542212963868834485233858128220055727804326451310080791</span></span><br><span class=\"line\">e1 = <span class=\"number\">425735006018518321920113858371691046233291394270779139216531379266829453665704656868245884309574741300746121946724344532456337490492263690989727904837374279175606623404025598533405400677329916633307585813849635071097268989906426771864410852556381279117588496262787146588414873723983855041415476840445850171457530977221981125006107741100779529209163446405585696682186452013669643507275620439492021019544922913941472624874102604249376990616323884331293660116156782891935217575308895791623826306100692059131945495084654854521834016181452508329430102813663713333608459898915361745215871305547069325129687311358338082029</span></span><br><span class=\"line\">e2 = <span class=\"number\">1004512650658647383814190582513307789549094672255033373245432814519573537648997991452158231923692387604945039180687417026069655569594454408690445879849410118502279459189421806132654131287284719070037134752526923855821229397612868419416851456578505341237256609343187666849045678291935806441844686439591365338539029504178066823886051731466788474438373839803448380498800384597878814991008672054436093542513518012957106825842251155935855375353004898840663429274565622024673235081082222394015174831078190299524112112571718817712276118850981261489528540025810396786605197437842655180663611669918785635193552649262904644919</span></span><br><span class=\"line\">a = (e2-e1)*(e1*e2).inverse_mod(N) % N<span class=\"comment\">#这里对x做了移项变形来保证f是首一的，不同的是这里模数为N</span></span><br><span class=\"line\">X = <span class=\"number\">2</span>^<span class=\"number\">1000</span></span><br><span class=\"line\">R = Zmod(N)</span><br><span class=\"line\">P.&lt;x&gt; = PolynomialRing(R, <span class=\"number\">1</span>);</span><br><span class=\"line\">f = x-a</span><br><span class=\"line\">bounds = [X]</span><br><span class=\"line\">xs = small_roots(f, bounds, m=<span class=\"number\">8</span>)<span class=\"comment\">#m表示n的次数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(xs) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">x0 = xs[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">p6 = gcd(f(x=x0), N)</span><br><span class=\"line\">p = iroot(<span class=\"built_in\">int</span>(p6), <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> p[<span class=\"number\">1</span>] == <span class=\"literal\">True</span></span><br><span class=\"line\">p = p[<span class=\"number\">0</span>]</span><br><span class=\"line\">q = N // p^<span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;p = %d&#x27;</span> % p)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;q = %d&#x27;</span> % q)</span><br></pre></td></tr></table></figure>\r\n<p>其中coppersmith.sage</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import itertools</span><br><span class=\"line\"></span><br><span class=\"line\">def small_roots(f, bounds, m=1, d=None):</span><br><span class=\"line\">\tif not d:</span><br><span class=\"line\">\t\td = f.degree()</span><br><span class=\"line\"></span><br><span class=\"line\">\tR = f.base_ring()</span><br><span class=\"line\">\tN = R.cardinality()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tf /= f.coefficients().pop(0)</span><br><span class=\"line\">\tf = f.change_ring(ZZ)</span><br><span class=\"line\"></span><br><span class=\"line\">\tG = Sequence([], f.parent())</span><br><span class=\"line\">\tfor i in range(m+1):</span><br><span class=\"line\">\t\tbase = N^(m-i) * f^i</span><br><span class=\"line\">\t\tfor shifts in itertools.product(range(d), repeat=f.nvariables()):</span><br><span class=\"line\">\t\t\tg = base * prod(map(power, f.variables(), shifts))</span><br><span class=\"line\">\t\t\tG.append(g)</span><br><span class=\"line\"></span><br><span class=\"line\">\tB, monomials = G.coefficient_matrix()</span><br><span class=\"line\">\tmonomials = vector(monomials)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfactors = [monomial(*bounds) for monomial in monomials]</span><br><span class=\"line\">\tfor i, factor in enumerate(factors):</span><br><span class=\"line\">\t\tB.rescale_col(i, factor)</span><br><span class=\"line\"></span><br><span class=\"line\">\tB = B.dense_matrix().LLL()</span><br><span class=\"line\"></span><br><span class=\"line\">\tB = B.change_ring(QQ)</span><br><span class=\"line\">\tfor i, factor in enumerate(factors):</span><br><span class=\"line\">\t\tB.rescale_col(i, 1/factor)</span><br><span class=\"line\"></span><br><span class=\"line\">\tH = Sequence([], f.parent().change_ring(QQ))</span><br><span class=\"line\">\tfor h in filter(None, B*monomials):</span><br><span class=\"line\">\t\tH.append(h)</span><br><span class=\"line\">\t\tI = H.ideal()</span><br><span class=\"line\">\t\tif I.dimension() == -1:</span><br><span class=\"line\">\t\t\tH.pop()</span><br><span class=\"line\">\t\telif I.dimension() == 0:</span><br><span class=\"line\">\t\t\troots = []</span><br><span class=\"line\">\t\t\tfor root in I.variety(ring=ZZ):</span><br><span class=\"line\">\t\t\t\troot = tuple(R(root[var]) for var in f.variables())</span><br><span class=\"line\">\t\t\t\troots.append(root)</span><br><span class=\"line\">\t\t\treturn roots</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn []</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"定理三\">定理三</h3>\r\n<p><span class=\"math inline\">\\(N_1=p_1^r*q_1\\)</span>，<span class=\"math inline\">\\(N_2=p_2^r*q_2\\)</span>，<span class=\"math inline\">\\(p_1&gt;p_2\\)</span>，如果<span class=\"math inline\">\\(|p_1-p_2|&lt;\\frac{p_1}{2rq_1q_2}\\)</span>，则N能在多项式时间内被分解</p>\r\n<p>证明过程靠wiener'attack</p>\r\n<p><img src=\"/2024/11/11/Crypto%E5%A5%BD%E9%A2%98%E8%B5%8F%E6%9E%90/2.png\"></p>\r\n<h1 id=\"羊城杯-2022lrsa\">[羊城杯 2022]LRSA</h1>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">from</span> flag <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"></span><br><span class=\"line\">m=bytes_to_long(flag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getPQ</span>(<span class=\"params\">p,q</span>):</span><br><span class=\"line\">    P=getPrime(<span class=\"number\">2048</span>)</span><br><span class=\"line\">    Q=getPrime(<span class=\"number\">2048</span>)</span><br><span class=\"line\">    t=(p*P-<span class=\"number\">58</span>*P+q)%Q</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (isPrime(Q))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> P,Q,t</span><br><span class=\"line\"></span><br><span class=\"line\">B=getRandomNBitInteger(<span class=\"number\">11</span>)</span><br><span class=\"line\">p=getPrime(B)</span><br><span class=\"line\">q=getPrime(B)</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\">c=<span class=\"built_in\">pow</span>(m,e,n)</span><br><span class=\"line\">P,Q,t=getPQ(p,q)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;B=&quot;</span>,B)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;P*P*Q=&quot;</span>,P*P*Q)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;P*Q*Q=&quot;</span>,P*Q*Q)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;t=&quot;</span>,t)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;c=&quot;</span>,c)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">B=1023</span></span><br><span class=\"line\"><span class=\"string\">P*P*Q=17550772391048142376662352375650397168226219900284185133945819378595084615279414529115194246625188015626268312188291451580718399491413731583962229337205180301248556893326419027312533686033888462669675100382278716791450615542537581657011200868911872550652311318486382920999726120813916439522474691195194557657267042628374572411645371485995174777885120394234154274071083542059010253657420242098856699109476857347677270860654429688935924519805555787949683144015873225388396740487817155358042797286990338440987035608851331840925854381286767024584195081004360635842976624747610461507795755042915965483135990495921912997789567020652729777216671481467049291624343256152446367091568361258918212012737611001009003078023715854575413979603297947011959023398306612437250872299406744778763429172689675430968886613391356192380152315042387148665654062576525633130546454743040442444227245763939134967515614637300940642555367668537324892890004459521919887178391559206373513466653484926149453481758790663522317898916616435463486824881406198956479504970446076256447830689197409184703931842169195650953917594642601134810084247402051464584676932882503143409428970896718980446185114397748313655630266379123438583315809104543663538494519415242569480492899140190587129956835218417371308642212037424611690324353109931657289337536406499314388951678319136343913551598851601805737870217800009086551022197432448461112330252097447894028786035069710260561955740514091976513928307284531381150606428802334767412638213776730300093872457594524254858721551285338651364457529927871215183857169772407595348187949014442596356406144157105062291018215254440382214000573515515859668018846789551567310531570458316720877172632139481792680258388798439064221051325274383331521717987420093245521230610073103811158660291643007279940393509663374960353315388446956868294358252276964954745551655711981</span></span><br><span class=\"line\"><span class=\"string\">P*Q*Q=17632503734712698604217167790453868045296303200715867263641257955056721075502316035280716025016839471684329988600978978424661087892466132185482035374940487837109552684763339574491378951189521258328752145077889261805000262141719400516584216130899437363088936913664419705248701787497332582188063869114908628807937049986360525010012039863210179017248132893824655341728382780250878156526086594253092249935304259986328308203344932540888448163430113818706295806406535364433801544858874357459282988110371175948011077595778123265914357153104206808258347815853145593128831233094769191889153762451880396333921190835200889266000562699392602082643298040136498839726733129090381507278582253125509943696419087708429546384313035073010683709744463087794325058122495375333875728593383803489271258323466068830034394348582326189840226236821974979834541554188673335151333713605570214286605391522582123096490317734786072061052604324131559447145448500381240146742679889154145555389449773359530020107821711994953950072547113428811855524572017820861579995449831880269151834230607863568992929328355995768974532894288752369127771516710199600449849031992434777962666440682129817924824151147427747882725858977273856311911431085373396551436319200582072164015150896425482384248479071434032953021738952688256364397405939276917210952583838731888536160866721278250628482428975748118973182256529453045184370543766401320261730361611365906347736001225775255350554164449014831203472238042057456969218316231699556466298168668958678855382462970622819417830000343573014265235688391542452769592096406400900187933156352226983897249981036555748543606676736274049188713348408983072484516372145496924391146241282884948724825393087105077360952770212959517318021248639012476095670769959011548699960423508352158455979906789927951812368185987838359200354730654103428077770839008773864604836807261909</span></span><br><span class=\"line\"><span class=\"string\">t=44</span></span><br><span class=\"line\"><span class=\"string\">c=4364802217291010807437827526073499188746160856656033054696031258814848127341094853323797303333741617649819892633013549917144139975939225893749114460910089509552261297408649636515368831194227006310835137628421405558641056278574098849091436284763725120659865442243245486345692476515256604820175726649516152356765363753262839864657243662645981385763738120585801720865252694204286145009527172990713740098977714337038793323846801300955225503801654258983911473974238212956519721447805792992654110642511482243273775873164502478594971816554268730722314333969932527553109979814408613177186842539860073028659812891580301154746</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"知识点-1\">知识点</h2>\r\n<p>Wiener Attack</p>\r\n<p>LLL约减</p>\r\n<h2 id=\"wp\">WP</h2>\r\n<p>这道题代表了两种典型解法，正如我知识点所列的</p>\r\n<p>首先做一下准备工作</p>\r\n<p>首先我们知道</p>\r\n<p>B=1023，所以p,q都是1023位的素数</p>\r\n<p>重点关注getPQ函数</p>\r\n<p>我们知道P,Q都是2048位的素数</p>\r\n<p>t=(p<em>P-58</em>P+q)%Q已知</p>\r\n<p>然后还已知P<em>P</em>Q,P<em>Q</em>Q，做一下gcd得到PQ，再与前面两个想除，就很容易得到P,Q</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> gcd</span><br><span class=\"line\">PPQ=<span class=\"number\">17550772391048142376662352375650397168226219900284185133945819378595084615279414529115194246625188015626268312188291451580718399491413731583962229337205180301248556893326419027312533686033888462669675100382278716791450615542537581657011200868911872550652311318486382920999726120813916439522474691195194557657267042628374572411645371485995174777885120394234154274071083542059010253657420242098856699109476857347677270860654429688935924519805555787949683144015873225388396740487817155358042797286990338440987035608851331840925854381286767024584195081004360635842976624747610461507795755042915965483135990495921912997789567020652729777216671481467049291624343256152446367091568361258918212012737611001009003078023715854575413979603297947011959023398306612437250872299406744778763429172689675430968886613391356192380152315042387148665654062576525633130546454743040442444227245763939134967515614637300940642555367668537324892890004459521919887178391559206373513466653484926149453481758790663522317898916616435463486824881406198956479504970446076256447830689197409184703931842169195650953917594642601134810084247402051464584676932882503143409428970896718980446185114397748313655630266379123438583315809104543663538494519415242569480492899140190587129956835218417371308642212037424611690324353109931657289337536406499314388951678319136343913551598851601805737870217800009086551022197432448461112330252097447894028786035069710260561955740514091976513928307284531381150606428802334767412638213776730300093872457594524254858721551285338651364457529927871215183857169772407595348187949014442596356406144157105062291018215254440382214000573515515859668018846789551567310531570458316720877172632139481792680258388798439064221051325274383331521717987420093245521230610073103811158660291643007279940393509663374960353315388446956868294358252276964954745551655711981</span></span><br><span class=\"line\">PQQ=<span class=\"number\">17632503734712698604217167790453868045296303200715867263641257955056721075502316035280716025016839471684329988600978978424661087892466132185482035374940487837109552684763339574491378951189521258328752145077889261805000262141719400516584216130899437363088936913664419705248701787497332582188063869114908628807937049986360525010012039863210179017248132893824655341728382780250878156526086594253092249935304259986328308203344932540888448163430113818706295806406535364433801544858874357459282988110371175948011077595778123265914357153104206808258347815853145593128831233094769191889153762451880396333921190835200889266000562699392602082643298040136498839726733129090381507278582253125509943696419087708429546384313035073010683709744463087794325058122495375333875728593383803489271258323466068830034394348582326189840226236821974979834541554188673335151333713605570214286605391522582123096490317734786072061052604324131559447145448500381240146742679889154145555389449773359530020107821711994953950072547113428811855524572017820861579995449831880269151834230607863568992929328355995768974532894288752369127771516710199600449849031992434777962666440682129817924824151147427747882725858977273856311911431085373396551436319200582072164015150896425482384248479071434032953021738952688256364397405939276917210952583838731888536160866721278250628482428975748118973182256529453045184370543766401320261730361611365906347736001225775255350554164449014831203472238042057456969218316231699556466298168668958678855382462970622819417830000343573014265235688391542452769592096406400900187933156352226983897249981036555748543606676736274049188713348408983072484516372145496924391146241282884948724825393087105077360952770212959517318021248639012476095670769959011548699960423508352158455979906789927951812368185987838359200354730654103428077770839008773864604836807261909</span></span><br><span class=\"line\">PQ=gcd(PPQ, PQQ)</span><br><span class=\"line\">P = PPQ // PQ</span><br><span class=\"line\">Q = PQQ // PQ</span><br><span class=\"line\"><span class=\"built_in\">print</span>(P)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(Q)</span><br><span class=\"line\"><span class=\"comment\">#25947339118736016261419550658264175914664266822085997909314096786508816404704696671837899420298768803641977765786592354116676036035881712512184992851487828263900367476619650087372125353190561974783134059421570649293920248116730478378196277387377082481961542018611824082110164117796622604412648512092528479878502094797494405077897059911764470830302447618882229233093021156725194893124743848364119720591518073753197359351271987724752861168913839307431377592888760273762302003490303315903644695784992125784390012046834505490167165377346036077504298195544062111718133371983287540723388743607671934081891907851056034062109</span></span><br><span class=\"line\"><span class=\"comment\">#26068172028162605137516470004551766376185367701690988148920400408760716114172673253571631718337447931195718779018987169967053546674529251665443499183399035216407895285607965767100708187327533611193709308966698251023076404422362272378862918994525181107002728889256377161661579892599243396304207048944032235378667269998644227976609632271355152717352269223310163307304914315780234040829575689991453848537587516055955657960061856059046256125836544109066275645648666876772298883460637600522819402448386193499472702636751025558486665290530268273787746964353937663176851849214999005525738643454160169651485201028944583316101</span></span><br></pre></td></tr></table></figure>\r\n<p>所以只需要关心一个式子</p>\r\n<p>$ Pp-58P+q=44(mod ,Q) $</p>\r\n<p>其中只有p,q未知</p>\r\n<p>要从一个同余方程解出两个未知数，首先肯定是想到格</p>\r\n<h3 id=\"法1lll求解svp\">法1：LLL求解SVP</h3>\r\n<p>为了构造出二维格，是需要两个式子的，于是对上式展开化简，我们有</p>\r\n<p>$ (p-58)P=44-q(mod ,Q) $</p>\r\n<p>$ (p-58)P+kQ=44-q $</p>\r\n<p>所以得到这个式子</p>\r\n<p>$ * = $</p>\r\n<p>中间这个二维矩阵就是我们构建的格了，它是已知的，记为L</p>\r\n<p>则det(L)=Q-P≈2048bit，记前面这个矩阵为A，后面这个为B</p>\r\n<p>||A||≈||B||≈2048bit</p>\r\n<p>所以对L做LLL约减求出的最短向量就很有可能等于B，然后让对应列相等，就能求出p,q</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P = <span class=\"number\">25947339118736016261419550658264175914664266822085997909314096786508816404704696671837899420298768803641977765786592354116676036035881712512184992851487828263900367476619650087372125353190561974783134059421570649293920248116730478378196277387377082481961542018611824082110164117796622604412648512092528479878502094797494405077897059911764470830302447618882229233093021156725194893124743848364119720591518073753197359351271987724752861168913839307431377592888760273762302003490303315903644695784992125784390012046834505490167165377346036077504298195544062111718133371983287540723388743607671934081891907851056034062109</span></span><br><span class=\"line\">Q = <span class=\"number\">26068172028162605137516470004551766376185367701690988148920400408760716114172673253571631718337447931195718779018987169967053546674529251665443499183399035216407895285607965767100708187327533611193709308966698251023076404422362272378862918994525181107002728889256377161661579892599243396304207048944032235378667269998644227976609632271355152717352269223310163307304914315780234040829575689991453848537587516055955657960061856059046256125836544109066275645648666876772298883460637600522819402448386193499472702636751025558486665290530268273787746964353937663176851849214999005525738643454160169651485201028944583316101</span></span><br><span class=\"line\">L = matrix(ZZ, [[<span class=\"number\">1</span>, P],[<span class=\"number\">0</span>, Q]])</span><br><span class=\"line\">B = L.LLL()</span><br><span class=\"line\">p = <span class=\"built_in\">abs</span>(B[<span class=\"number\">0</span>][<span class=\"number\">0</span>])+<span class=\"number\">58</span></span><br><span class=\"line\">q = <span class=\"number\">44</span>+<span class=\"built_in\">abs</span>(B[<span class=\"number\">0</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"comment\">#80736411146583842306585010871034886981016840349026602734742256246556342668178774083233822097872779308174897649383396380481655663281333047577768952571915605685701400990749928642136680236367785948214890529631428970999122918591632651324318444462622996015719163492064450044087392474349767300242266723293755137263</span></span><br><span class=\"line\"><span class=\"comment\">#71239161441539946834999944364158306978517617517717217001776063773301330324729178632534286023377366747004115034635139042058644768011502688969022553791977558750633767627495955645170437100983708648876951588485253787441732757259210010467734037546118780321368088487269039555130213851691659851510403573663333586451</span></span><br></pre></td></tr></table></figure>\r\n<p>然后就解决了</p>\r\n<h3 id=\"法2wiener-attack\">法2：Wiener Attack</h3>\r\n<p>我们已经有了<span class=\"math inline\">\\(t+KQ=P(P-58)+Q\\)</span></p>\r\n<p>而且已知P,Q&gt;&gt;p,q,t</p>\r\n<p>那么两边同时除以Q，有</p>\r\n<p>$ K ≈  $</p>\r\n<p>为了能使用Wiener Attack，需要两边都是分数，所以把p-58除过去，有 <span class=\"math display\">\\[\r\n\\frac{K}{p-58}≈\\frac{P}{Q}\r\n\\]</span> 右边是已知的，可以连分数展开，展开后的一项就包含了p-58，然后就得到p了</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">continuedFra</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;计算连分数</span></span><br><span class=\"line\"><span class=\"string\">    :param x: 分子</span></span><br><span class=\"line\"><span class=\"string\">    :param y: 分母</span></span><br><span class=\"line\"><span class=\"string\">    :return: 连分数列表</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    cf = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> y:</span><br><span class=\"line\">        cf.append(x // y)</span><br><span class=\"line\">        x, y = y, x % y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cf</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gradualFra</span>(<span class=\"params\">cf</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;计算传入列表最后的渐进分数</span></span><br><span class=\"line\"><span class=\"string\">    :param cf: 连分数列表</span></span><br><span class=\"line\"><span class=\"string\">    :return: 该列表最后的渐近分数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    numerator = <span class=\"number\">0</span> <span class=\"comment\"># 分子</span></span><br><span class=\"line\">    denominator = <span class=\"number\">1</span> <span class=\"comment\"># 分母</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> cf[::-<span class=\"number\">1</span>]:</span><br><span class=\"line\">        <span class=\"comment\"># 这里的渐进分数分子分母要分开</span></span><br><span class=\"line\">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numerator, denominator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getGradualFra</span>(<span class=\"params\">cf</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;计算列表所有的渐近分数</span></span><br><span class=\"line\"><span class=\"string\">    :param cf: 连分数列表</span></span><br><span class=\"line\"><span class=\"string\">    :return: 该列表所有的渐近分数</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    gf = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(cf) + <span class=\"number\">1</span>):</span><br><span class=\"line\">        gf.append(gradualFra(cf[:i]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">wienerAttack</span>(<span class=\"params\">e, n</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param e:</span></span><br><span class=\"line\"><span class=\"string\">    :param n:</span></span><br><span class=\"line\"><span class=\"string\">    :return: 私钥d</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    cf = continuedFra(e, n)</span><br><span class=\"line\">    gf = getGradualFra(cf)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p_58,_ <span class=\"keyword\">in</span> gf: <span class=\"comment\"># 不得不说最后要倒一下呀！</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isPrime(p_58 + <span class=\"number\">58</span>) <span class=\"keyword\">and</span> (p_58 + <span class=\"number\">58</span>).bit_length() == <span class=\"number\">1023</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p_58 + <span class=\"number\">58</span></span><br><span class=\"line\"></span><br><span class=\"line\">P = <span class=\"number\">25947339118736016261419550658264175914664266822085997909314096786508816404704696671837899420298768803641977765786592354116676036035881712512184992851487828263900367476619650087372125353190561974783134059421570649293920248116730478378196277387377082481961542018611824082110164117796622604412648512092528479878502094797494405077897059911764470830302447618882229233093021156725194893124743848364119720591518073753197359351271987724752861168913839307431377592888760273762302003490303315903644695784992125784390012046834505490167165377346036077504298195544062111718133371983287540723388743607671934081891907851056034062109</span></span><br><span class=\"line\">Q = <span class=\"number\">26068172028162605137516470004551766376185367701690988148920400408760716114172673253571631718337447931195718779018987169967053546674529251665443499183399035216407895285607965767100708187327533611193709308966698251023076404422362272378862918994525181107002728889256377161661579892599243396304207048944032235378667269998644227976609632271355152717352269223310163307304914315780234040829575689991453848537587516055955657960061856059046256125836544109066275645648666876772298883460637600522819402448386193499472702636751025558486665290530268273787746964353937663176851849214999005525738643454160169651485201028944583316101</span></span><br><span class=\"line\">p=wienerAttack(P,Q)</span><br><span class=\"line\">q = ((<span class=\"number\">58</span> - p) * P +<span class=\"number\">44</span>) % Q</span><br><span class=\"line\">c=<span class=\"number\">4364802217291010807437827526073499188746160856656033054696031258814848127341094853323797303333741617649819892633013549917144139975939225893749114460910089509552261297408649636515368831194227006310835137628421405558641056278574098849091436284763725120659865442243245486345692476515256604820175726649516152356765363753262839864657243662645981385763738120585801720865252694204286145009527172990713740098977714337038793323846801300955225503801654258983911473974238212956519721447805792992654110642511482243273775873164502478594971816554268730722314333969932527553109979814408613177186842539860073028659812891580301154746</span></span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\">phi = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">d = invert(e,phi)</span><br><span class=\"line\">m = long_to_bytes(<span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(c,d,p * q)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br><span class=\"line\"><span class=\"comment\"># DASCTF&#123;8f3djoj9wedj2_dkc903cwckckdk&#125;</span></span><br></pre></td></tr></table></figure>\r\n<p>另一个求连分数的版本，大同小异</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform</span>(<span class=\"params\">x, y</span>):  <span class=\"comment\"># 使用辗转相除法将分数 x/y 转为连分数的形式</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> y:</span><br><span class=\"line\">        res.append(x // y)</span><br><span class=\"line\">        x, y = y, x % y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">continued_fraction</span>(<span class=\"params\">sub_res</span>):</span><br><span class=\"line\">    numerator, denominator = <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> sub_res[::-<span class=\"number\">1</span>]:  <span class=\"comment\"># 从sublist的后面往前循环</span></span><br><span class=\"line\">        denominator, numerator = numerator, i * numerator + denominator</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numerator, denominator  <span class=\"comment\"># 得到渐进分数的分母和分子，并返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 求解每个渐进分数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sub_fraction</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    res = transform(x, y)</span><br><span class=\"line\">    res = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(continued_fraction, (res[<span class=\"number\">0</span>:i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(res) + <span class=\"number\">1</span>))))  <span class=\"comment\"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">wienerAttack</span>(<span class=\"params\">n2, n1</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (_, p) <span class=\"keyword\">in</span> sub_fraction(n2, n1):  <span class=\"comment\"># 用一个for循环来注意试探 n2/n1 的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> p == <span class=\"number\">0</span>:  <span class=\"comment\"># 可能出现连分数第一个值为0的情况，排除</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isPrime(p+<span class=\"number\">58</span>) <span class=\"keyword\">and</span> (p + <span class=\"number\">58</span>).bit_length() == <span class=\"number\">1023</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (p+<span class=\"number\">58</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;该方法不适用&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">P = <span class=\"number\">25947339118736016261419550658264175914664266822085997909314096786508816404704696671837899420298768803641977765786592354116676036035881712512184992851487828263900367476619650087372125353190561974783134059421570649293920248116730478378196277387377082481961542018611824082110164117796622604412648512092528479878502094797494405077897059911764470830302447618882229233093021156725194893124743848364119720591518073753197359351271987724752861168913839307431377592888760273762302003490303315903644695784992125784390012046834505490167165377346036077504298195544062111718133371983287540723388743607671934081891907851056034062109</span></span><br><span class=\"line\">Q = <span class=\"number\">26068172028162605137516470004551766376185367701690988148920400408760716114172673253571631718337447931195718779018987169967053546674529251665443499183399035216407895285607965767100708187327533611193709308966698251023076404422362272378862918994525181107002728889256377161661579892599243396304207048944032235378667269998644227976609632271355152717352269223310163307304914315780234040829575689991453848537587516055955657960061856059046256125836544109066275645648666876772298883460637600522819402448386193499472702636751025558486665290530268273787746964353937663176851849214999005525738643454160169651485201028944583316101</span></span><br><span class=\"line\">p = wienerAttack(P, Q)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(p)</span><br><span class=\"line\">q = ((<span class=\"number\">58</span> - p) * P +<span class=\"number\">44</span>) % Q</span><br><span class=\"line\">c=<span class=\"number\">4364802217291010807437827526073499188746160856656033054696031258814848127341094853323797303333741617649819892633013549917144139975939225893749114460910089509552261297408649636515368831194227006310835137628421405558641056278574098849091436284763725120659865442243245486345692476515256604820175726649516152356765363753262839864657243662645981385763738120585801720865252694204286145009527172990713740098977714337038793323846801300955225503801654258983911473974238212956519721447805792992654110642511482243273775873164502478594971816554268730722314333969932527553109979814408613177186842539860073028659812891580301154746</span></span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\">phi = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">d = invert(e,phi)</span><br><span class=\"line\">m = long_to_bytes(<span class=\"built_in\">int</span>(<span class=\"built_in\">pow</span>(c,d,p * q)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"easy_wiener原创\">easy_wiener(原创)</h1>\r\n<p>此题依据d3factor的扩展论文中的定理三</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\">m1 = <span class=\"string\">&#x27;flag&#123;*********&#x27;</span></span><br><span class=\"line\">m2 = <span class=\"string\">&#x27;*************&#125;&#x27;</span></span><br><span class=\"line\">m1 = s2n(m1)</span><br><span class=\"line\">m2 = s2n(m2)</span><br><span class=\"line\">r = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_n</span>():</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        p1 = getPrime(<span class=\"number\">1024</span>)</span><br><span class=\"line\">        p2 = next_prime((p1 &gt;&gt; <span class=\"number\">24</span>) &lt;&lt; <span class=\"number\">24</span>)</span><br><span class=\"line\">        q1 = getPrime(<span class=\"number\">500</span>)</span><br><span class=\"line\">        q2 = getPrime(<span class=\"number\">500</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(p1-p2) &lt; p1 // (<span class=\"number\">2</span> * r * q1 * q2):</span><br><span class=\"line\">            n1 = p1 ** r * q1</span><br><span class=\"line\">            n2 = p2 ** r * q2</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n1, n2</span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\">n1, n2 = generate_n()</span><br><span class=\"line\">c1 = <span class=\"built_in\">pow</span>(m1, e, n1)</span><br><span class=\"line\">c2 = <span class=\"built_in\">pow</span>(m2, e, n2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n1 =&#x27;</span>, n1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;n2 =&#x27;</span>, n2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;c1 =&#x27;</span>, c1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;c2 =&#x27;</span>, c2)</span><br><span class=\"line\"><span class=\"comment\">#n1 = 51382911377188396138989985678133360667045336423994627215452525174945947062289706809429809527062049781258206779449705472307769787085626378258132650187531409466616863275068115242018526246001536216341915770692150752352991329001979766282958937412673660826183785950126205505161921956599712492335649464350956254193132202762237645013417228523121563513583664960426064789228334370264708917485709117337763595188996538518044825301793653201481702096542531814746004669902405989524407839172043607905206587410425086456394074966377003644647000445592650793114180879226671258084352284776634223993787559328411086103862682630582147248147622393547689240018930516633220524445692348693628632478262011590350699120263679801608337491650459785162258861792119950715187458090372089821672612953504568234239723448883019530583648744682885274384869720776803816842567508881742735081083875795760902029271641086551456106876263713022036357715153227797095877569804888328992031263694214443572782795703698565449302723368454753860838241560762965972948922630771831605908451913443768048271630477065438689742610461524238860471376634829752255399929826401605177379364766995684008556378594790979554171614926741211507298018479436452984761176457545725153028341350294092781901251539037106956317878651514500732746590699343149754146127334254033038611081972708074897032230503625577071647121637472537993208797196538836173046093776634714468478539650540322902232781261527090894578387229382557748772069458538400544188341335168727909705009639381320459984813500543326648951168837605394769827026143554969221167512837766209745717428557281816476679729984859033413872523853938590774762921839976816881477369063709920941647513779658497867288430358821193361</span></span><br><span class=\"line\"><span class=\"comment\">#n2 = 50417233643889688970116596070690490416883046699709887787504919855033418365525120131616250119599820213779695072947139638965542234999861307451365294150195418693367032032278786724939119238491744697691793297216176789921110280629647023866656479734187525170155006140636330835911640738494034604350931686521275126567148418280969797317344911967964584621620430856336753474631788535071197611258966806285713313464098932376551254739474490495989614788845417922807067933478521023102164677940068933769549960220158639689234603927915512687379449714781903912589749169765182314872530140708738897112931214565544183172653192888708915540717909713654116109941140875697279510756044698752087249734090564951308719351614159706984434464280209505960683403006914572549674694916322968151709863468000219202432770871615620601988915408836629155148096333641149779461420360856691539459228700627872704614142212559698839512434426035088942900250364288246660973003746773664075138288382380320427027054114323369591943409383864622017513605475697431970890940096008446775738666239588950200374724480511307022756881332182373382432468388731935886477371535299489755305158953186253192407745023150423678886472815346223645871159339820913852558331437505481633163425674420957445261244631101937271034424737072899252067185079268481442430481295665362008533291721826248065739959265943991211959656175984790887163433786095055879407149773916500793710397194678677223583420439541285511068542594707941077123445429033548711076308990503117150969585804540276766259290529672585041707583525188910312096177563279200481539586269730831354685207661736959362204148907384669992388179857656363293351396463494989354075698339168607501375660123794658779171047651886468589</span></span><br><span class=\"line\"><span class=\"comment\">#c1 = 34103469057914420546514705456738825823245806267164214040833497595708085995339648535122705822473222912683673058754330953273346753384723114047836058722295578145965957097873223025928413922355277901974823398569955693931247594794673351348941479375205977815009349658811039269988061424822999739915552610967712810818780263819607455142529282686318086136371749798854975192344455858351285980794890137994059242846437073282393919651748354407275071999482670066495865243953326223608731723211719316083157242088531329426491883494334439922007755826636367410623328962829104419465905862033109954801392919414825034894368654374386875575381743971206775416768732460432370297738832362036081143483100327055071553912892409507541475680798203455341587170386717286206153664233565250949958785492986757956449865442027479100973179194935714015834501310259129325635723578275318681305503673420278951069781730229831692592377247981700872044485999577408456474295702608575758905481441258252505811534396051835437692930159857837543941271635170924076809214631988983235015030676072722273321127637748065455854355435383218678148001838828590318751388113610414282116862825918553119109196352640516778841446718962711141884415627333405736534276420628379340196184485750299025886953931604475384569745787397671327913934126392620557917378312170494705506658306870215967863319445871628071516217576779466205382750558868263028955664847093885090705114292371347978510371033191071909727452129367891829806188209485918059857283505663537601763662368028271628679694198364311974984710973621816353298610078987738935255812135932284849391905995275651554080566091031830194297579468155358835610692813441652789156302298220036059184180171888018657355873816716412448 </span></span><br><span class=\"line\"><span class=\"comment\">#c2 = 8378136968643803459137281070507400038103952498008983064369380027062494141274857098343524924224412171401833117764748272831051940103588095107136134886734098748410727584858742714589061982317688046265961680191477205347266297025369262995924117463401008434217157537295728345365720953914666687032694719046205794876226032625589882090863071086878523490487381604129888994733650202166293397750817483894705464937246900883087296129536695114972536424041856837166479300652290706249169184806298035258334197214100526323833940745163186291781040352190747373674813242910312449114106808641946224278512784621422915929055153389253397047507417011294228531985602693278843742740724681243738622852683205666541084684926691766522982865943698299052492516542582242969039539149561390066235290850507904468393374030971593802943135899820007871843563391087824673123610069581976366218404796104922561097514318369362337663197016319389686187668603928504479715108602062891537074218141871591307903680013661361144706414461129090462182228689513451039474857517770685500588494519089485107179069597053950928195413189388404038193790527722979004267565100667843294112893122211600818160145501135049691772196007410063622686400937429586337863813836614469974749022218452889134494334300288562681645470671503719382203827650723660535209456030892968037147234285192184525799211280562391242521025401456613016944494060288002851819989958680530168150428460741501521729976655733711784351330422059838511708372418092189626689939258815084651537352268290786797832898677090619086489740176186159800129473010438361776644511865625693238005832945074777570119706750624145962984688906083883154628679930675054511444685946008150385435808847916159080382249213000782191</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"wp-1\">WP</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> libnum <span class=\"keyword\">import</span> *</span><br><span class=\"line\">r = <span class=\"number\">5</span></span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\">n1 = <span class=\"number\">51382911377188396138989985678133360667045336423994627215452525174945947062289706809429809527062049781258206779449705472307769787085626378258132650187531409466616863275068115242018526246001536216341915770692150752352991329001979766282958937412673660826183785950126205505161921956599712492335649464350956254193132202762237645013417228523121563513583664960426064789228334370264708917485709117337763595188996538518044825301793653201481702096542531814746004669902405989524407839172043607905206587410425086456394074966377003644647000445592650793114180879226671258084352284776634223993787559328411086103862682630582147248147622393547689240018930516633220524445692348693628632478262011590350699120263679801608337491650459785162258861792119950715187458090372089821672612953504568234239723448883019530583648744682885274384869720776803816842567508881742735081083875795760902029271641086551456106876263713022036357715153227797095877569804888328992031263694214443572782795703698565449302723368454753860838241560762965972948922630771831605908451913443768048271630477065438689742610461524238860471376634829752255399929826401605177379364766995684008556378594790979554171614926741211507298018479436452984761176457545725153028341350294092781901251539037106956317878651514500732746590699343149754146127334254033038611081972708074897032230503625577071647121637472537993208797196538836173046093776634714468478539650540322902232781261527090894578387229382557748772069458538400544188341335168727909705009639381320459984813500543326648951168837605394769827026143554969221167512837766209745717428557281816476679729984859033413872523853938590774762921839976816881477369063709920941647513779658497867288430358821193361</span></span><br><span class=\"line\">n2 = <span class=\"number\">50417233643889688970116596070690490416883046699709887787504919855033418365525120131616250119599820213779695072947139638965542234999861307451365294150195418693367032032278786724939119238491744697691793297216176789921110280629647023866656479734187525170155006140636330835911640738494034604350931686521275126567148418280969797317344911967964584621620430856336753474631788535071197611258966806285713313464098932376551254739474490495989614788845417922807067933478521023102164677940068933769549960220158639689234603927915512687379449714781903912589749169765182314872530140708738897112931214565544183172653192888708915540717909713654116109941140875697279510756044698752087249734090564951308719351614159706984434464280209505960683403006914572549674694916322968151709863468000219202432770871615620601988915408836629155148096333641149779461420360856691539459228700627872704614142212559698839512434426035088942900250364288246660973003746773664075138288382380320427027054114323369591943409383864622017513605475697431970890940096008446775738666239588950200374724480511307022756881332182373382432468388731935886477371535299489755305158953186253192407745023150423678886472815346223645871159339820913852558331437505481633163425674420957445261244631101937271034424737072899252067185079268481442430481295665362008533291721826248065739959265943991211959656175984790887163433786095055879407149773916500793710397194678677223583420439541285511068542594707941077123445429033548711076308990503117150969585804540276766259290529672585041707583525188910312096177563279200481539586269730831354685207661736959362204148907384669992388179857656363293351396463494989354075698339168607501375660123794658779171047651886468589</span></span><br><span class=\"line\">c1 = <span class=\"number\">34103469057914420546514705456738825823245806267164214040833497595708085995339648535122705822473222912683673058754330953273346753384723114047836058722295578145965957097873223025928413922355277901974823398569955693931247594794673351348941479375205977815009349658811039269988061424822999739915552610967712810818780263819607455142529282686318086136371749798854975192344455858351285980794890137994059242846437073282393919651748354407275071999482670066495865243953326223608731723211719316083157242088531329426491883494334439922007755826636367410623328962829104419465905862033109954801392919414825034894368654374386875575381743971206775416768732460432370297738832362036081143483100327055071553912892409507541475680798203455341587170386717286206153664233565250949958785492986757956449865442027479100973179194935714015834501310259129325635723578275318681305503673420278951069781730229831692592377247981700872044485999577408456474295702608575758905481441258252505811534396051835437692930159857837543941271635170924076809214631988983235015030676072722273321127637748065455854355435383218678148001838828590318751388113610414282116862825918553119109196352640516778841446718962711141884415627333405736534276420628379340196184485750299025886953931604475384569745787397671327913934126392620557917378312170494705506658306870215967863319445871628071516217576779466205382750558868263028955664847093885090705114292371347978510371033191071909727452129367891829806188209485918059857283505663537601763662368028271628679694198364311974984710973621816353298610078987738935255812135932284849391905995275651554080566091031830194297579468155358835610692813441652789156302298220036059184180171888018657355873816716412448</span></span><br><span class=\"line\">c2 = <span class=\"number\">8378136968643803459137281070507400038103952498008983064369380027062494141274857098343524924224412171401833117764748272831051940103588095107136134886734098748410727584858742714589061982317688046265961680191477205347266297025369262995924117463401008434217157537295728345365720953914666687032694719046205794876226032625589882090863071086878523490487381604129888994733650202166293397750817483894705464937246900883087296129536695114972536424041856837166479300652290706249169184806298035258334197214100526323833940745163186291781040352190747373674813242910312449114106808641946224278512784621422915929055153389253397047507417011294228531985602693278843742740724681243738622852683205666541084684926691766522982865943698299052492516542582242969039539149561390066235290850507904468393374030971593802943135899820007871843563391087824673123610069581976366218404796104922561097514318369362337663197016319389686187668603928504479715108602062891537074218141871591307903680013661361144706414461129090462182228689513451039474857517770685500588494519089485107179069597053950928195413189388404038193790527722979004267565100667843294112893122211600818160145501135049691772196007410063622686400937429586337863813836614469974749022218452889134494334300288562681645470671503719382203827650723660535209456030892968037147234285192184525799211280562391242521025401456613016944494060288002851819989958680530168150428460741501521729976655733711784351330422059838511708372418092189626689939258815084651537352268290786797832898677090619086489740176186159800129473010438361776644511865625693238005832945074777570119706750624145962984688906083883154628679930675054511444685946008150385435808847916159080382249213000782191</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#连分数求解q1, q2</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform</span>(<span class=\"params\">x, y</span>):  <span class=\"comment\"># 使用辗转相除法将分数 x/y 转为连分数的形式</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> y:</span><br><span class=\"line\">        res.append(x // y)</span><br><span class=\"line\">        x, y = y, x % y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">continued_fraction</span>(<span class=\"params\">sub_res</span>):</span><br><span class=\"line\">    numerator, denominator = <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> sub_res[::-<span class=\"number\">1</span>]:  <span class=\"comment\"># 从sublist的后面往前循环</span></span><br><span class=\"line\">        denominator, numerator = numerator, i * numerator + denominator</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numerator, denominator  <span class=\"comment\"># 得到渐进分数的分母和分子，并返回</span></span><br><span class=\"line\">    <span class=\"comment\"># 求解每个渐进分数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sub_fraction</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    res = transform(x, y)</span><br><span class=\"line\">    res = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(continued_fraction, (res[<span class=\"number\">0</span>:i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(res) + <span class=\"number\">1</span>))))  <span class=\"comment\"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"comment\"># 以上是获得x/y的连分数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">wienerAttack</span>(<span class=\"params\">n1, n2</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (q1, q2) <span class=\"keyword\">in</span> sub_fraction(n1, n2):  <span class=\"comment\"># 用一个for循环来注意试探 n2/n1 的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> q1 == <span class=\"number\">0</span>:  <span class=\"comment\"># 可能出现连分数第一个值为0的情况，排除</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n1 % q1 == <span class=\"number\">0</span> <span class=\"keyword\">and</span> q1 != <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (q1, q2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;该方法不适用&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">q1,q2 = wienerAttack(n1, n2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;q1 =&#x27;</span>, q1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;q2 =&#x27;</span>, q2)</span><br><span class=\"line\"><span class=\"comment\">#q1 = 2631182389679601188296794737924209313900253422354705602562931499792191989836837249035688562009241155154338224027150752092819609973085951558698047407873</span></span><br><span class=\"line\"><span class=\"comment\">#q2 = 2581732598341204937645836726979982661996790380709960486137874056555554174213313212917895612456485943522045246411105352049415249361305540144283101959627</span></span><br><span class=\"line\">p1 = n1 // q1</span><br><span class=\"line\">p2 = n2 // q2</span><br><span class=\"line\">phi1 = p1 ** (r-<span class=\"number\">1</span>) * (p1-<span class=\"number\">1</span>) * (q1 - <span class=\"number\">1</span>)</span><br><span class=\"line\">phi2 = p2 ** (r-<span class=\"number\">1</span>) * (p2-<span class=\"number\">1</span>) * (q2 - <span class=\"number\">1</span>)</span><br><span class=\"line\">d1 = invert(e, phi1)</span><br><span class=\"line\">d2 = invert(e, phi2)</span><br><span class=\"line\">m1 = <span class=\"built_in\">pow</span>(c1, d1, n1)</span><br><span class=\"line\">m2 = <span class=\"built_in\">pow</span>(c2, d2, n2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(n2s(<span class=\"built_in\">int</span>(m1)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(n2s(<span class=\"built_in\">int</span>(m2)))</span><br><span class=\"line\"><span class=\"comment\">#b&#x27;flag&#123;Wi3ner_4tTack_c4n_br34k_The_s&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#b&#x27;3cret_wh3n_yOur_p_ar3_t00_close!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "crypto"
            ]
        },
        {
            "id": "https://sxq2003.github.io/2024/11/10/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84Random/",
            "url": "https://sxq2003.github.io/2024/11/10/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84Random/",
            "title": "密码学中的Random",
            "date_published": "2024-11-10T12:08:18.000Z",
            "content_html": "<p>密码学中经常会遇到一类随机数预测的题目，这里来总结一下</p>\r\n<h1 id=\"引出主题gkctf-2021random\">引出主题：[GKCTF 2021]Random</h1>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_mask</span>():</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;random.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">104</span>):</span><br><span class=\"line\">        file.write(<span class=\"built_in\">str</span>(random.getrandbits(<span class=\"number\">32</span>))+<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">        file.write(<span class=\"built_in\">str</span>(random.getrandbits(<span class=\"number\">64</span>))+<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">        file.write(<span class=\"built_in\">str</span>(random.getrandbits(<span class=\"number\">96</span>))+<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\">get_mask()</span><br><span class=\"line\">flag = md5(<span class=\"built_in\">str</span>(random.getrandbits(<span class=\"number\">32</span>)).encode()).hexdigest()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\r\n<p>python中random库使用的是MT19937算法</p>\r\n<h1 id=\"具体原理\">具体原理</h1>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_int32</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(<span class=\"number\">0xFFFFFFFF</span> &amp; x)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MT19937</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 根据seed初始化624的state</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, seed</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.mt = [<span class=\"number\">0</span>] * <span class=\"number\">624</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.mt[<span class=\"number\">0</span>] = seed</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.mti = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">624</span>):</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.mt[i] = _int32(<span class=\"number\">1812433253</span> * (<span class=\"variable language_\">self</span>.mt[i - <span class=\"number\">1</span>] ^ <span class=\"variable language_\">self</span>.mt[i - <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">30</span>) + i)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 提取伪随机数</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">extract_number</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.mti == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.twist()</span><br><span class=\"line\">        y = <span class=\"variable language_\">self</span>.mt[<span class=\"variable language_\">self</span>.mti]</span><br><span class=\"line\">        y = y ^ y &gt;&gt; <span class=\"number\">11</span></span><br><span class=\"line\">        y = y ^ y &lt;&lt; <span class=\"number\">7</span> &amp; <span class=\"number\">2636928640</span></span><br><span class=\"line\">        y = y ^ y &lt;&lt; <span class=\"number\">15</span> &amp; <span class=\"number\">4022730752</span></span><br><span class=\"line\">        y = y ^ y &gt;&gt; <span class=\"number\">18</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.mti = (<span class=\"variable language_\">self</span>.mti + <span class=\"number\">1</span>) % <span class=\"number\">624</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _int32(y)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 对状态进行旋转</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">twist</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">624</span>):</span><br><span class=\"line\">            y = _int32((<span class=\"variable language_\">self</span>.mt[i] &amp; <span class=\"number\">0x80000000</span>) + (<span class=\"variable language_\">self</span>.mt[(i + <span class=\"number\">1</span>) % <span class=\"number\">624</span>] &amp; <span class=\"number\">0x7fffffff</span>))</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.mt[i] = (y &gt;&gt; <span class=\"number\">1</span>) ^ <span class=\"variable language_\">self</span>.mt[(i + <span class=\"number\">397</span>) % <span class=\"number\">624</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> y % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.mt[i] = <span class=\"variable language_\">self</span>.mt[i] ^ <span class=\"number\">0x9908b0df</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p><img src=\"/2024/11/10/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84Random/1.png\"></p>\r\n<p>上面一大堆话，总结一下就是<strong>如果能获取前624个32位的随机数，就能预测出后面全部32位的随机数</strong>。</p>\r\n<p>random的随机数以32位为一个单位，所以如果要产生一个64位的随机数，则等价于一次产生两个32位随机数a,b，并将b&lt;&lt;32+a作为这个64位随机数。同理，96位随机数=产生a,b,c，c&lt;&lt;64+b&lt;&lt;32+a。</p>\r\n<p>本题中已知的随机数有104*(1+2+3)=624个，刚好满足能够预测的条件，需要我们预测出下一个。</p>\r\n<p>至于如何预测，有多种方法</p>\r\n<h2 id=\"解法一randcrack\">解法一：randcrack</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"><span class=\"keyword\">from</span> randcrack <span class=\"keyword\">import</span> RandCrack</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&#x27;random.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:  <span class=\"comment\">#读入数据</span></span><br><span class=\"line\">    l = f.readlines()</span><br><span class=\"line\">l = [<span class=\"built_in\">int</span>(i.strip()) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> l]</span><br><span class=\"line\">t = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(l)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i % <span class=\"number\">3</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        t.append(l[i])\t<span class=\"comment\">#32位长度直接存入</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i % <span class=\"number\">3</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>)) \t<span class=\"comment\">#64位长度先存入低32位</span></span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">32</span>)\t\t\t\t\t<span class=\"comment\">#再存入高32位</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>))\t<span class=\"comment\">#96位的低32位</span></span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">64</span> - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">32</span>)\t<span class=\"comment\">#中间32位</span></span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">64</span>)\t<span class=\"comment\">#高32位</span></span><br><span class=\"line\">rc = RandCrack()\t<span class=\"comment\">#创建一个预测器</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">    rc.submit(i)\t<span class=\"comment\">#把每个数据都丢进预测器里</span></span><br><span class=\"line\">flag = rc.predict_getrandbits(<span class=\"number\">32</span>)\t<span class=\"comment\">#预测的下一个32位</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(md5(<span class=\"built_in\">str</span>(flag).encode()).hexdigest())</span><br><span class=\"line\"><span class=\"comment\">#注意顺序很重要</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"解法二逆向\">解法二：逆向</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!python3</span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Time : 2020/10/25 21:59</span></span><br><span class=\"line\"><span class=\"comment\"># @Author : A.James</span></span><br><span class=\"line\"><span class=\"comment\"># @FileName: exp2.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> Random</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># right shift inverse</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inverse_right</span>(<span class=\"params\">res,shift,bits=<span class=\"number\">32</span></span>):</span><br><span class=\"line\">    tmp = res</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(bits//shift):</span><br><span class=\"line\">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># right shift with mask inverse</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inverse_right_values</span>(<span class=\"params\">res,shift,mask,bits=<span class=\"number\">32</span></span>):</span><br><span class=\"line\">    tmp = res</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(bits//shift):</span><br><span class=\"line\">        tmp = res ^ tmp&gt;&gt;shift &amp; mask</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># left shift inverse</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inverse_left</span>(<span class=\"params\">res,shift,bits=<span class=\"number\">32</span></span>):</span><br><span class=\"line\">    tmp = res</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(bits//shift):</span><br><span class=\"line\">        tmp = res ^ tmp &lt;&lt; shift</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># left shift with mask inverse</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inverse_left_values</span>(<span class=\"params\">res,shift,mask,bits=<span class=\"number\">32</span></span>):</span><br><span class=\"line\">    tmp = res</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(bits//shift):</span><br><span class=\"line\">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">backtrace</span>(<span class=\"params\">cur</span>):</span><br><span class=\"line\">    high = <span class=\"number\">0x80000000</span></span><br><span class=\"line\">    low = <span class=\"number\">0x7fffffff</span></span><br><span class=\"line\">    mask = <span class=\"number\">0x9908b0df</span></span><br><span class=\"line\">    state = cur</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">        tmp = state[i+<span class=\"number\">624</span>]^state[i+<span class=\"number\">397</span>]</span><br><span class=\"line\">        <span class=\"comment\"># recover Y,tmp = Y</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &amp; high == high:</span><br><span class=\"line\">            tmp ^= mask</span><br><span class=\"line\">            tmp &lt;&lt;= <span class=\"number\">1</span></span><br><span class=\"line\">            tmp |= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            tmp &lt;&lt;=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># recover highest bit</span></span><br><span class=\"line\">        res = tmp&amp;high</span><br><span class=\"line\">        <span class=\"comment\"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span></span><br><span class=\"line\">        tmp = state[i-<span class=\"number\">1</span>+<span class=\"number\">624</span>]^state[i+<span class=\"number\">396</span>]</span><br><span class=\"line\">        <span class=\"comment\"># recover Y,tmp = Y</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &amp; high == high:</span><br><span class=\"line\">            tmp ^= mask</span><br><span class=\"line\">            tmp &lt;&lt;= <span class=\"number\">1</span></span><br><span class=\"line\">            tmp |= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            tmp &lt;&lt;=<span class=\"number\">1</span></span><br><span class=\"line\">        res |= (tmp)&amp;low</span><br><span class=\"line\">        state[i] = res</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">recover_state</span>(<span class=\"params\">out</span>):</span><br><span class=\"line\">    state = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> out:</span><br><span class=\"line\">        i = inverse_right(i,<span class=\"number\">18</span>)</span><br><span class=\"line\">        i = inverse_left_values(i,<span class=\"number\">15</span>,<span class=\"number\">0xefc60000</span>)</span><br><span class=\"line\">        i = inverse_left_values(i,<span class=\"number\">7</span>,<span class=\"number\">0x9d2c5680</span>)</span><br><span class=\"line\">        i = inverse_right(i,<span class=\"number\">11</span>)</span><br><span class=\"line\">        state.append(i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\"></span><br><span class=\"line\">l = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;sgcc.txt&#x27;</span>,<span class=\"string\">&#x27;r&#x27;</span>).readlines()</span><br><span class=\"line\">l = [<span class=\"built_in\">int</span>(i.strip()) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> l]</span><br><span class=\"line\"><span class=\"comment\">#print(l)</span></span><br><span class=\"line\"></span><br><span class=\"line\">t = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(l)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i % <span class=\"number\">4</span> == <span class=\"number\">0</span>:<span class=\"comment\"># 32</span></span><br><span class=\"line\">        t.append(l[i])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i % <span class=\"number\">4</span> == <span class=\"number\">1</span>: <span class=\"comment\">#64</span></span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>))</span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">32</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i % <span class=\"number\">4</span> == <span class=\"number\">2</span>: <span class=\"comment\">#96</span></span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>))</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">64</span> - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">32</span>)</span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">64</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> :<span class=\"comment\">#128</span></span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>))</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">64</span> - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">32</span>)</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">96</span> - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">64</span>)</span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">96</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">partS = recover_state(t)</span><br><span class=\"line\">state = backtrace(partS+[<span class=\"number\">0</span>])[-<span class=\"number\">624</span>:] <span class=\"comment\">##获取后624位随机数</span></span><br><span class=\"line\">prng = Random()</span><br><span class=\"line\">prng.setstate((<span class=\"number\">3</span>,<span class=\"built_in\">tuple</span>(state+[<span class=\"number\">624</span>]),<span class=\"literal\">None</span>))</span><br><span class=\"line\">flag = md5(<span class=\"built_in\">str</span>(prng.getrandbits(<span class=\"number\">32</span>)).encode()).hexdigest()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"解法三mt19937predictor\">解法三：mt19937predictor</h2>\r\n<p>和randcrack差不多</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> mt19937predictor <span class=\"keyword\">import</span> MT19937Predictor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&#x27;random.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:  <span class=\"comment\">#读入数据</span></span><br><span class=\"line\">    l = f.readlines()</span><br><span class=\"line\">l = [<span class=\"built_in\">int</span>(i.strip()) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> l]</span><br><span class=\"line\">t = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(l)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i % <span class=\"number\">3</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        t.append(l[i])\t<span class=\"comment\">#32位长度直接存入</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i % <span class=\"number\">3</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>)) \t<span class=\"comment\">#64位长度先存入低32位</span></span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">32</span>)\t\t\t\t\t<span class=\"comment\">#再存入高32位</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>))\t<span class=\"comment\">#96位的低32位</span></span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">64</span> - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">32</span>)\t<span class=\"comment\">#中间32位</span></span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">64</span>)\t<span class=\"comment\">#高32位</span></span><br><span class=\"line\"></span><br><span class=\"line\">predictor = MT19937Predictor()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">    predictor.setrandbits(i, <span class=\"number\">32</span>)</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"扩展求前随机数\">扩展：求前随机数</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> extend_mt19937_predictor <span class=\"keyword\">import</span> ExtendMT19937Predictor</span><br><span class=\"line\"></span><br><span class=\"line\">numbers = [random.getrandbits(<span class=\"number\">64</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1024</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">predictor = ExtendMT19937Predictor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">78</span>):</span><br><span class=\"line\">    predictor.setrandbits(random.getrandbits(<span class=\"number\">256</span>), <span class=\"number\">256</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">_ = [predictor.backtrack_getrandbits(<span class=\"number\">256</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">78</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> numbers[::-<span class=\"number\">1</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> x == predictor.backtrack_getrandbits(<span class=\"number\">64</span>)</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"更多题目\">更多题目</h1>\r\n<p>数据： <a href=\"output.zip\">output.zip</a></p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;output.bin&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(random.randbytes(<span class=\"number\">2500</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;HITCTF2023&#123;%s&#125;&#x27;</span> % random.randbytes(<span class=\"number\">16</span>).<span class=\"built_in\">hex</span>())</span><br></pre></td></tr></table></figure>\r\n<p>题目已知产生了2500个byte，一个byte是8位，也就是说4个byte组成一个32位随机数，2500/4=625&gt;624，满足预测条件</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> mt19937predictor <span class=\"keyword\">import</span> MT19937Predictor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#读取数据，并4个一组组成一个32位随机数(little是重点)</span></span><br><span class=\"line\">c = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;output.bin&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\">c = [c[x:x+<span class=\"number\">4</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(c), <span class=\"number\">4</span>)]</span><br><span class=\"line\">c = [<span class=\"built_in\">int</span>.from_bytes(x, <span class=\"string\">&#x27;little&#x27;</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> c]</span><br><span class=\"line\"></span><br><span class=\"line\">predictor = MT19937Predictor()</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> c[:<span class=\"number\">624</span>]:</span><br><span class=\"line\">\tpredictor.setrandbits(x, <span class=\"number\">32</span>) <span class=\"comment\">#只需要624组数据就行</span></span><br><span class=\"line\"><span class=\"keyword\">assert</span> predictor.getrandbits(<span class=\"number\">32</span>) == c[-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;HITCTF2023&#123;%s&#125;&#x27;</span> % predictor.randbytes(<span class=\"number\">16</span>).<span class=\"built_in\">hex</span>())</span><br><span class=\"line\"><span class=\"comment\"># HITCTF2023&#123;d6712c20657ce5e02118f8592b7da71f&#125;</span></span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "crypto",
                "伪随机"
            ]
        },
        {
            "id": "https://sxq2003.github.io/2024/04/07/%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E7%9A%84LWE/",
            "url": "https://sxq2003.github.io/2024/04/07/%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E7%9A%84LWE/",
            "title": "一道经典的LWE",
            "date_published": "2024-04-07T01:16:12.000Z",
            "content_html": "<h1 id=\"problem\">Problem</h1>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> secret <span class=\"keyword\">import</span> flag</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gravity</span>(<span class=\"params\">n,d=<span class=\"number\">0.25</span></span>):</span><br><span class=\"line\">    A=np.zeros([n,n])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            A[i,j]=d/n*(d**<span class=\"number\">2</span>+((i-j)/n)**<span class=\"number\">2</span>)**(-<span class=\"number\">1.5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A</span><br><span class=\"line\"> </span><br><span class=\"line\">n=<span class=\"built_in\">len</span>(flag)</span><br><span class=\"line\">A=gravity(n)</span><br><span class=\"line\">x=np.array(<span class=\"built_in\">list</span>(flag))</span><br><span class=\"line\">b=A@x</span><br><span class=\"line\">np.savetxt(<span class=\"string\">&#x27;b.txt&#x27;</span>,b)</span><br></pre></td></tr></table></figure>\r\n<p>看似很简单，<span class=\"math inline\">\\(b=A*x\\)</span>，不就是个矩阵乘法嘛<span class=\"math inline\">\\(A、b\\)</span>都已知，直接<span class=\"math inline\">\\(x=b*A^{-1}\\)</span>不就好了。实则没这么简单。</p>\r\n<p>原因就在于<span class=\"math inline\">\\(A\\)</span>中的元素全都是浮点数，你回去会有精度损失，无法还原flag。这就需要我们把<span class=\"math inline\">\\(A\\)</span>中的元素放大(乘上一个很大的数，如<span class=\"math inline\">\\(10^{20}\\)</span>)，去掉小数点，但是这样处理之后会有误差，还要误差考虑进去，经典的LWE问题。</p>\r\n<p>设误差为<span class=\"math inline\">\\(s\\)</span>，则<span class=\"math inline\">\\(b+s=Ax\\)</span>，将LWE问题转换为SVP问题，因为<span class=\"math inline\">\\(A,b\\)</span>已知，<span class=\"math inline\">\\(s,x\\)</span>未知</p>\r\n<p>构造矩阵<span class=\"math inline\">\\(\\begin{pmatrix}A &amp; 0 \\\\ -b &amp; 1 \\end{pmatrix}\\)</span>作为基向量，有<span class=\"math inline\">\\(\\begin{pmatrix}x&amp;1 \\end{pmatrix}\\begin{pmatrix}A &amp; 0 \\\\ -b &amp; 1 \\end{pmatrix}=\\begin{pmatrix}s &amp; 1 \\end{pmatrix}\\)</span></p>\r\n<p>对<span class=\"math inline\">\\(\\begin{pmatrix}A &amp; 0 \\\\ -b &amp; 1 \\end{pmatrix}\\)</span>格基规约，利用LLL算法得到<span class=\"math inline\">\\(\\begin{pmatrix}s&amp; 1 \\end{pmatrix}\\)</span></p>\r\n<p>因此<span class=\"math inline\">\\(x=\\begin{pmatrix}s&amp; 1 \\end{pmatrix}\\begin{pmatrix}A &amp; 0 \\\\ -b &amp; 1 \\end{pmatrix}^{-1}\\)</span></p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gravity</span>(<span class=\"params\">n,d=<span class=\"number\">0.25</span></span>):</span><br><span class=\"line\">    A=np.zeros([n,n])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            A[i,j]=d/n*(d**<span class=\"number\">2</span>+((i-j)/n)**<span class=\"number\">2</span>)**(-<span class=\"number\">1.5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A</span><br><span class=\"line\"> </span><br><span class=\"line\">b = np.loadtxt(<span class=\"string\">&#x27;b.txt&#x27;</span>)</span><br><span class=\"line\">n = <span class=\"number\">85</span></span><br><span class=\"line\">multiple = <span class=\"number\">10</span> ^ <span class=\"number\">20</span></span><br><span class=\"line\">A = gravity(n)</span><br><span class=\"line\"> </span><br><span class=\"line\">A = [[<span class=\"built_in\">int</span>(j * multiple) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> A] <span class=\"comment\"># 乘上一个大数</span></span><br><span class=\"line\">b = [<span class=\"built_in\">int</span>(i * (-<span class=\"number\">1</span>) * multiple) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> b] <span class=\"comment\">#把b转换成-b</span></span><br><span class=\"line\">M = [A[i] + [<span class=\"number\">0</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">M.append(b + [<span class=\"number\">1</span>])</span><br><span class=\"line\">M = Matrix(ZZ, n + <span class=\"number\">1</span>, n + <span class=\"number\">1</span>, M) <span class=\"comment\">#构造基向量</span></span><br><span class=\"line\">ans = M.LLL()[<span class=\"number\">0</span>] <span class=\"comment\"># 格基规约</span></span><br><span class=\"line\"><span class=\"comment\"># print(ans)</span></span><br><span class=\"line\">flag = M.solve_left(ans)</span><br><span class=\"line\"><span class=\"comment\"># print(bytes(flag))</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(flag[:-<span class=\"number\">1</span>]).decode())</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "crypto",
                "lwe",
                "格"
            ]
        },
        {
            "id": "https://sxq2003.github.io/2024/03/08/Sage%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/",
            "url": "https://sxq2003.github.io/2024/03/08/Sage%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/",
            "title": "Sage常见函数用法",
            "date_published": "2024-03-08T03:42:14.000Z",
            "content_html": "<h1 id=\"solve_mod\">solve_mod</h1>\r\n<p>作用：解同余方程</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = var(&#x27;x&#x27;)</span><br><span class=\"line\">solve_mod([方程],模数)</span><br></pre></td></tr></table></figure>\r\n<p>如</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x, y = var(<span class=\"string\">&#x27;x,y&#x27;</span>)</span><br><span class=\"line\">mod = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(solve_mod(<span class=\"number\">2</span>*x + y == <span class=\"number\">3</span>, mod))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(solve_mod(<span class=\"number\">2</span>*x + y == <span class=\"number\">3</span>, mod, solution_dict = <span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(solve_mod((<span class=\"number\">2</span>*x + y == <span class=\"number\">3</span>, x + <span class=\"number\">3</span>*y == <span class=\"number\">1</span>), mod))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(solve_mod((<span class=\"number\">2</span>*x + y == <span class=\"number\">3</span>, x + <span class=\"number\">3</span>*y == <span class=\"number\">1</span>), mod, solution_dict = <span class=\"literal\">True</span>))</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"discrete_log\">discrete_log</h1>\r\n<p>作用：求解离散对数问题</p>\r\n<p>例如</p>\r\n<p><span class=\"math inline\">\\(c =g^m(mod\\,p)\\)</span>，其中<span class=\"math inline\">\\(c,g,p\\)</span>已知，<span class=\"math inline\">\\(m\\)</span>未知</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m = discrete_log(mod(c,p),mod(g,p))</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"nth_root\">nth_root</h1>\r\n<p>作用：模数下开根</p>\r\n<p>例如</p>\r\n<p><span class=\"math inline\">\\(c = m^e(mod\\,n)\\)</span></p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m=Mod(c,n).nth_root(e, <span class=\"built_in\">all</span>=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"p.x-zz\">P.&lt;x&gt; = ZZ[]</h1>\r\n<p>作用：整数域下设未知数x</p>\r\n<p>例如</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">44538727182858207226040251762322467288176239968967952269350336889655421753182750730773886813281253762528207970314694060562016861614492626112150259048393048617529867598499261392152098087985858905944606287003243</span></span><br><span class=\"line\">enc = <span class=\"number\">37578889436345667053409195986387874079577521081198523844555524501835825138236698001996990844798291201187483119265306641889824719989940722147655181198458261772053545832559971159703922610578530282146835945192532</span></span><br><span class=\"line\"></span><br><span class=\"line\">P.&lt;k&gt; = ZZ[] </span><br><span class=\"line\">p = k** <span class=\"number\">6</span> + <span class=\"number\">7</span> *k** <span class=\"number\">4</span> - <span class=\"number\">40</span> *k** <span class=\"number\">3</span> + <span class=\"number\">12</span> *k** <span class=\"number\">2</span> - <span class=\"number\">114</span> *k + <span class=\"number\">31377</span></span><br><span class=\"line\">q = k** <span class=\"number\">5</span> - <span class=\"number\">8</span> *k** <span class=\"number\">4</span> + <span class=\"number\">19</span> *k** <span class=\"number\">3</span> - <span class=\"number\">313</span> *k** <span class=\"number\">2</span> - <span class=\"number\">14</span> *k + <span class=\"number\">14011</span></span><br><span class=\"line\">f = p * q - n </span><br><span class=\"line\">k = f.roots()[<span class=\"number\">0</span>][<span class=\"number\">0</span>] </span><br><span class=\"line\">p = ZZ(p(k)) </span><br><span class=\"line\">q = ZZ(q(k)) </span><br><span class=\"line\">d = inverse_mod( <span class=\"number\">31337</span>, (p- <span class=\"number\">1</span>)*(q- <span class=\"number\">1</span>)) </span><br><span class=\"line\">m = power_mod(enc, d, n) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"其他\">其他</h1>\r\n<h2 id=\"facx\">fac(x)</h2>\r\n<p><span class=\"math inline\">\\(x!\\)</span></p>\r\n<h2 id=\"modcn\">Mod(c,n)</h2>\r\n<p><span class=\"math inline\">\\(c\\)</span>在模<span class=\"math inline\">\\(n\\)</span>下的值</p>\r\n<h2 id=\"euler_phix\">euler_phi(x)</h2>\r\n<p><span class=\"math inline\">\\(x\\)</span>的欧拉函数</p>\r\n",
            "tags": [
                "-sage -crypto"
            ]
        }
    ]
}