{
    "version": "https://jsonfeed.org/version/1",
    "title": "sxq • All posts by \"coppersmith\" tag",
    "description": "",
    "home_page_url": "https://sxq2003.github.io",
    "items": [
        {
            "id": "https://sxq2003.github.io/2024/11/11/Coppersmith%E7%9B%B8%E5%85%B3%E6%94%BB%E5%87%BB/",
            "url": "https://sxq2003.github.io/2024/11/11/Coppersmith%E7%9B%B8%E5%85%B3%E6%94%BB%E5%87%BB/",
            "title": "Coppersmith相关攻击",
            "date_published": "2024-11-11T09:48:58.000Z",
            "content_html": "<h1 id=\"factoring-with-high-bits-known已知p的高位\">Factoring with High Bits Known(已知p的高位)</h1>\r\n<p><img src=\"/2024/11/11/Coppersmith%E7%9B%B8%E5%85%B3%E6%94%BB%E5%87%BB/1.png\"></p>\r\n<h2 id=\"经典例子\">经典例子</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=<span class=\"number\">0x5894f869d1aecee379e2cb60ff7314d18dbd383e0c9f32e7f7b4dc8bd47535d4f3512ce6a23b0251049346fede745d116ba8d27bcc4d7c18cfbd86c7d065841788fcd600d5b3ac5f6bb1e111f265994e550369ddd86e20f615606bf21169636d153b6dfee4472b5a3cb111d0779d02d9861cc724d389eb2c07a71a7b3941da7dL</span></span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\">m=random.getrandbits(<span class=\"number\">512</span>)</span><br><span class=\"line\">c=<span class=\"built_in\">pow</span>(m,e,n)=<span class=\"number\">0x284a601c3321fd882d3b64ae27fb587d1714bc18aecc3293169861bcf17678a6e83947aba4f165f22a712ed42e43c66cf70eb1df4d73dd3adf1754f627b1b3ca25b76b3a595369c36b1f5635cd3efe5924539757e74840224eec238534ead0bcbdce26eb018aa33516d22790240c7576cb5a09d3f69bcf2795a3a353db7c8bedL</span></span><br><span class=\"line\">((p&gt;&gt;<span class=\"number\">128</span>)&lt;&lt;<span class=\"number\">128</span>)=<span class=\"number\">0x5d33504b4e3bd2ffb628b5c447c4a7152a9f37dc4bcc8f376f64000fa96eb97c0af445e3b2c03926a4aa4542918c601000000000000000000000000000000000L</span></span><br></pre></td></tr></table></figure>\r\n<p>解题脚本</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">0x5894f869d1aecee379e2cb60ff7314d18dbd383e0c9f32e7f7b4dc8bd47535d4f3512ce6a23b0251049346fede745d116ba8d27bcc4d7c18cfbd86c7d065841788fcd600d5b3ac5f6bb1e111f265994e550369ddd86e20f615606bf21169636d153b6dfee4472b5a3cb111d0779d02d9861cc724d389eb2c07a71a7b3941da7dL</span></span><br><span class=\"line\">p_fake = <span class=\"number\">0x5d33504b4e3bd2ffb628b5c447c4a7152a9f37dc4bcc8f376f64000fa96eb97c0af445e3b2c03926a4aa4542918c601000000000000000000000000000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">pbits = p_fake.nbits()</span><br><span class=\"line\">kbits = <span class=\"number\">128</span>  <span class=\"comment\">#p失去的低位</span></span><br><span class=\"line\">pbar = p_fake &amp; (<span class=\"number\">2</span>^pbits-<span class=\"number\">2</span>^kbits)</span><br><span class=\"line\"><span class=\"built_in\">print</span> (<span class=\"string\">&quot;upper %d bits (of %d bits) is given&quot;</span> % (pbits-kbits, pbits))</span><br><span class=\"line\"> </span><br><span class=\"line\">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\">f = x + pbar</span><br><span class=\"line\">x0 = f.small_roots(X=<span class=\"number\">2</span>^kbits, beta=<span class=\"number\">0.4</span>)[<span class=\"number\">0</span>]  <span class=\"comment\"># find root &lt; 2^kbits with factor &gt;= n^0.3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (x0 + pbar)</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"差几位的情况\">差几位的情况</h2>\r\n<p>爆破</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">n = </span><br><span class=\"line\">e=</span><br><span class=\"line\">pbits =  \t<span class=\"comment\">#p原本的位数</span></span><br><span class=\"line\">phigh =     <span class=\"comment\">#p的已知高位</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trange(<span class=\"number\">2</span>**<span class=\"number\">8</span>): <span class=\"comment\">#trange和range的作用相同，但是trange可以显示进度条</span></span><br><span class=\"line\">    p4 = phigh&lt;&lt;<span class=\"number\">8</span>     </span><br><span class=\"line\">    p4 = p4 + i        </span><br><span class=\"line\">    kbits = pbits - p4.nbits()  <span class=\"comment\">#未知位数</span></span><br><span class=\"line\">    p4 = p4 &lt;&lt; kbits</span><br><span class=\"line\">    PR.&lt;x&gt; = PolynomialRing(Zmod(n)) <span class=\"comment\">#套脚本</span></span><br><span class=\"line\">    f = x + p4</span><br><span class=\"line\">    roots = f.small_roots(X=<span class=\"number\">2</span>^kbits, beta=<span class=\"number\">0.4</span>, epsilon=<span class=\"number\">0.01</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> roots:</span><br><span class=\"line\">        p = p4 + <span class=\"built_in\">int</span>(roots[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;p:&quot;</span>,p)</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"已知p的高位与部分中间位的情况\">已知p的高位与部分中间位的情况</h2>\r\n<p>例题</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.Util.number import getStrongPrime</span><br><span class=\"line\">from gmpy import next_prime</span><br><span class=\"line\">from random import getrandbits</span><br><span class=\"line\">from flag import flag</span><br><span class=\"line\"></span><br><span class=\"line\">p=getStrongPrime(1024)</span><br><span class=\"line\">q=next_prime(p^((1&lt;&lt;900)-1)^getrandbits(300))</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\">e=65537</span><br><span class=\"line\"></span><br><span class=\"line\">m=int(flag.encode(&#x27;hex&#x27;),16)</span><br><span class=\"line\">assert m&lt;n</span><br><span class=\"line\">c=pow(m,e,n)</span><br><span class=\"line\"></span><br><span class=\"line\">print(hex(n))</span><br><span class=\"line\">#0xe78ab40c343d4985c1de167e80ba2657c7ee8c2e26d88e0026b68fe400224a3bd7e2a7103c3b01ea4d171f5cf68c8f00a64304630e07341cde0bc74ef5c88dcbb9822765df53182e3f57153b5f93ff857d496c6561c3ddbe0ce6ff64ba11d4edfc18a0350c3d0e1f8bd11b3560a111d3a3178ed4a28579c4f1e0dc17cb02c3ac38a66a230ba9a2f741f9168641c8ce28a3a8c33d523553864f014752a04737e555213f253a72f158893f80e631de2f55d1d0b2b654fc7fa4d5b3d95617e8253573967de68f6178f78bb7c4788a3a1e9778cbfc7c7fa8beffe24276b9ad85b11eed01b872b74cdc44959059c67c18b0b7a1d57512319a5e84a9a0735fa536f1b3</span><br><span class=\"line\"></span><br><span class=\"line\">print(hex(c))</span><br><span class=\"line\">#0xd7f6c90512bc9494370c3955ff3136bb245a6d1095e43d8636f66f11db525f2063b14b2a4363a96e6eb1bea1e9b2cc62b0cae7659f18f2b8e41fca557281a1e859e8e6b35bd114655b6bf5e454753653309a794fa52ff2e79433ca4bbeb1ab9a78ec49f49ebee2636abd9dd9b80306ae1b87a86c8012211bda88e6e14c58805feb6721a01481d1a7031eb3333375a81858ff3b58d8837c188ffcb982a631e1a7a603b947a6984bd78516c71cfc737aaba479688d56df2c0952deaf496a4eb3f603a46a90efbe9e82a6aef8cfb23e5fcb938c9049b227b7f15c878bd99b61b6c56db7dfff43cd457429d5dcdb5fe314f1cdf317d0c5202bad6a9770076e9b25b1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>解法</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tqdm import *</span><br><span class=\"line\">from libnum import *</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\">n = 0xe78ab40c343d4985c1de167e80ba2657c7ee8c2e26d88e0026b68fe400224a3bd7e2a7103c3b01ea4d171f5cf68c8f00a64304630e07341cde0bc74ef5c88dcbb9822765df53182e3f57153b5f93ff857d496c6561c3ddbe0ce6ff64ba11d4edfc18a0350c3d0e1f8bd11b3560a111d3a3178ed4a28579c4f1e0dc17cb02c3ac38a66a230ba9a2f741f9168641c8ce28a3a8c33d523553864f014752a04737e555213f253a72f158893f80e631de2f55d1d0b2b654fc7fa4d5b3d95617e8253573967de68f6178f78bb7c4788a3a1e9778cbfc7c7fa8beffe24276b9ad85b11eed01b872b74cdc44959059c67c18b0b7a1d57512319a5e84a9a0735fa536f1b3</span><br><span class=\"line\">e = 65537</span><br><span class=\"line\">c = 0xd7f6c90512bc9494370c3955ff3136bb245a6d1095e43d8636f66f11db525f2063b14b2a4363a96e6eb1bea1e9b2cc62b0cae7659f18f2b8e41fca557281a1e859e8e6b35bd114655b6bf5e454753653309a794fa52ff2e79433ca4bbeb1ab9a78ec49f49ebee2636abd9dd9b80306ae1b87a86c8012211bda88e6e14c58805feb6721a01481d1a7031eb3333375a81858ff3b58d8837c188ffcb982a631e1a7a603b947a6984bd78516c71cfc737aaba479688d56df2c0952deaf496a4eb3f603a46a90efbe9e82a6aef8cfb23e5fcb938c9049b227b7f15c878bd99b61b6c56db7dfff43cd457429d5dcdb5fe314f1cdf317d0c5202bad6a9770076e9b25b1</span><br><span class=\"line\">hight_124 = gmpy2.iroot(n,2)[0]</span><br><span class=\"line\">hight_124 &gt;&gt;= 900</span><br><span class=\"line\">print(hight_124)</span><br><span class=\"line\"># p = ((hight_124 &lt;&lt; 900) ^ (1&lt;&lt;900)-1) ^ ((1&lt;&lt;300)-1)</span><br><span class=\"line\"># q = (hight_124 &lt;&lt; 900)</span><br><span class=\"line\"># for i in range(899,299,-1):</span><br><span class=\"line\">#     tmp = 1 &lt;&lt; i</span><br><span class=\"line\">#     tmp_p = p ^ tmp</span><br><span class=\"line\">#     tmp_q = q ^ tmp</span><br><span class=\"line\">#     if tmp_p * tmp_q &lt; n:</span><br><span class=\"line\">#         p,q = tmp_p,tmp_q</span><br><span class=\"line\">p = 170966211863977623201944075700366958395158791305775637137148430402719914596268969449870561801896130406088025694634815584789789278534177858182071449441084789053688828370314062664371344767976558822028720769455584351917209508431456012727131938700513852456800512509515671651181190792109543581556171983224752308224</span><br><span class=\"line\">for i in trange(300,600):</span><br><span class=\"line\">    h_p = (p &gt;&gt; i)&lt;&lt;i</span><br><span class=\"line\">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\">    f = h_p + x</span><br><span class=\"line\">    root = f.small_roots(X=2^i,beta=0.4)</span><br><span class=\"line\">    if len(root) &gt; 0:</span><br><span class=\"line\">        p = int(h_p + root[0])#这里要转化为int，我也不知道为啥</span><br><span class=\"line\">        print(p,i)</span><br><span class=\"line\">        break</span><br><span class=\"line\">q = n // p</span><br><span class=\"line\">phi = (p - 1) * (q - 1)</span><br><span class=\"line\"></span><br><span class=\"line\">d = gmpy2.invert(e,phi)</span><br><span class=\"line\">m = pow(c,d,n)</span><br><span class=\"line\">print(n2s(int(m)))</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"已知p的高位p或q的低位\">已知p的高位，p或q的低位</h2>\r\n<p>例题</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.Util.number import getPrime, bytes_to_long</span><br><span class=\"line\">from secret import flag</span><br><span class=\"line\"></span><br><span class=\"line\">p = getPrime(1024)</span><br><span class=\"line\">q = getPrime(1024)</span><br><span class=\"line\">n = p * q</span><br><span class=\"line\">e = 65537</span><br><span class=\"line\">hint1 = p &gt;&gt; 724</span><br><span class=\"line\">hint2 = q % (2 ** 265)</span><br><span class=\"line\">ct = pow(bytes_to_long(flag), e, n)</span><br><span class=\"line\">print(hint1)</span><br><span class=\"line\">print(hint2)</span><br><span class=\"line\">print(n)</span><br><span class=\"line\">print(ct)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#hint: 1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span><br><span class=\"line\">#hint2: 40812438243894343296354573724131194431453023461572200856406939246297219541329623</span><br><span class=\"line\">#n: 21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span><br><span class=\"line\">#ct: 19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span><br><span class=\"line\">#知道p的高300位，和q的低265位</span><br></pre></td></tr></table></figure>\r\n<p>解</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\"> </span><br><span class=\"line\">p1 = <span class=\"number\">1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span></span><br><span class=\"line\">q0 = <span class=\"number\">40812438243894343296354573724131194431453023461572200856406939246297219541329623</span></span><br><span class=\"line\">n = <span class=\"number\">21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span></span><br><span class=\"line\">mod=<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>,<span class=\"number\">265</span>)</span><br><span class=\"line\">p0=n*invert(q0,mod)%mod <span class=\"comment\">#q低位推导出p的低位</span></span><br><span class=\"line\">pbar=(p1&lt;&lt;<span class=\"number\">724</span>)+p0</span><br><span class=\"line\">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">32</span>):</span><br><span class=\"line\">    f=pbar+x*mod*<span class=\"number\">32</span></span><br><span class=\"line\">    f=f.monic()</span><br><span class=\"line\">    pp=f.small_roots(X=<span class=\"number\">2</span>^<span class=\"number\">454</span>,beta=<span class=\"number\">0.4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pp):</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    pbar+=mod</span><br><span class=\"line\"> </span><br><span class=\"line\">p=pbar+pp[<span class=\"number\">0</span>]*<span class=\"number\">32</span>*mod</span><br><span class=\"line\"><span class=\"keyword\">assert</span> n%p==<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(p)</span><br><span class=\"line\"> </span><br><span class=\"line\">q=n//p</span><br><span class=\"line\">phi=(p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">e=<span class=\"number\">65537</span></span><br><span class=\"line\">d=invert(e,phi)</span><br><span class=\"line\">c=<span class=\"number\">19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span></span><br><span class=\"line\">m=<span class=\"built_in\">pow</span>(c,d,n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"nA2YA\">\r\n<font style=\"color:rgb(51, 51, 51);\">Stereotyped messages(已知m的高位)</font>\r\n</h1>\r\n<h1 id=\"stereotyped-messages已知m的高位\">Stereotyped messages(已知m的高位)</h1>\r\n<p>其实就是解个模方程，e需要很小</p>\r\n<h2 id=\"例题\">例题</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=0x2519834a6cc3bf25d078caefc5358e41c726a7a56270e425e21515d1b195b248b82f4189a0b621694586bb254e27010ee4376a849bb373e5e3f2eb622e3e7804d18ddb897463f3516b431e7fc65ec41c42edf736d5940c3139d1e374aed1fc3b70737125e1f540b541a9c671f4bf0ded798d727211116eb8b86cdd6a29aefcc7L</span><br><span class=\"line\">e=3</span><br><span class=\"line\">m=random.getrandbits(512)</span><br><span class=\"line\">c=pow(m,e,n)=0x1f6f6a8e61f7b5ad8bef738f4376a96724192d8da1e3689dec7ce5d1df615e0910803317f9bafb6671ffe722e0292ce76cca399f2af1952dd31a61b37019da9cf27f82c3ecd4befc03c557efe1a5a29f9bb73c0239f62ed951955718ac0eaa3f60a4c415ef064ea33bbd61abe127c6fc808c0edb034c52c45bd20a219317fb75L</span><br><span class=\"line\">((m&gt;&gt;72)&lt;&lt;72)=0xb11ffc4ce423c77035280f1c575696327901daac8a83c057c453973ee5f4e508455648886441c0f3393fe4c922ef1c3a6249c12d21a000000000000000000L</span><br></pre></td></tr></table></figure>\r\n<p>解</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = 0x2519834a6cc3bf25d078caefc5358e41c726a7a56270e425e21515d1b195b248b82f4189a0b621694586bb254e27010ee4376a849bb373e5e3f2eb622e3e7804d18ddb897463f3516b431e7fc65ec41c42edf736d5940c3139d1e374aed1fc3b70737125e1f540b541a9c671f4bf0ded798d727211116eb8b86cdd6a29aefcc7</span><br><span class=\"line\">e = 3</span><br><span class=\"line\">m = randrange(n)</span><br><span class=\"line\">c = pow(m, e, n)</span><br><span class=\"line\">beta = 1</span><br><span class=\"line\">epsilon = beta^2/7</span><br><span class=\"line\">nbits = n.nbits()</span><br><span class=\"line\">kbits = floor(nbits*(beta^2/e-epsilon))</span><br><span class=\"line\">  </span><br><span class=\"line\">mbar = 0xb11ffc4ce423c77035280f1c575696327901daac8a83c057c453973ee5f4e508455648886441c0f3393fe4c922ef1c3a6249c12d21a000000000000000000</span><br><span class=\"line\">c = 0x1f6f6a8e61f7b5ad8bef738f4376a96724192d8da1e3689dec7ce5d1df615e0910803317f9bafb6671ffe722e0292ce76cca399f2af1952dd31a61b37019da9cf27f82c3ecd4befc03c557efe1a5a29f9bb73c0239f62ed951955718ac0eaa3f60a4c415ef064ea33bbd61abe127c6fc808c0edb034c52c45bd20a219317fb75</span><br><span class=\"line\">print (&quot;upper %d bits (of %d bits) is given&quot; % (nbits-kbits, nbits))</span><br><span class=\"line\"> </span><br><span class=\"line\">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\">f = (mbar + x)^e - c</span><br><span class=\"line\">x0 = f.small_roots(X=2^kbits, beta=1)[0]  # find root &lt; 2^kbits with factor = n1</span><br><span class=\"line\">print (mbar + x0)</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"partial-key-exposure-attack已知d的低位\">Partial Key Exposure Attack(已知d的低位)</h1>\r\n<p>如果知道d的低位，低位约为n的位数的1/4就可以恢复d</p>\r\n<h2 id=\"例题-1\">例题</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=0xd463feb999c9292e25acd7f98d49a13413df2c4e74820136e739281bb394a73f2d1e6b53066932f50a73310360e5a5c622507d8662dadaef860b3266222129fd645eb74a0207af9bd79a9794f4bd21f32841ce9e1700b0b049cfadb760993fcfc7c65eca63904aa197df306cad8720b1b228484629cf967d808c13f6caef94a9L</span><br><span class=\"line\">e=3</span><br><span class=\"line\">m=random.getrandbits(512)</span><br><span class=\"line\">c=pow(m,e,n)=0xcaeeb38516d642a19550fa863173f4695c3b44bd5a5554b1e93cfb690d5c1de531b7f1187f7d8c8c11da38af025f19d393033d0ca801e15d6d8441098485f13ab988d09ef1f4f5a735e19780c823cf77415884c33a1f7908cf4229874c082eb7ceb776bafb182b86fdabd29b07bcb8e3f2f50ee4cc0f323e8d9ce320139bcd27L</span><br><span class=\"line\">d=invmod(e,(p-1)*(q-1))</span><br><span class=\"line\">d&amp;((1&lt;&lt;512)-1)=0x603d033f2ef6c759aec839f132a45215fc8a635b757f3951a731fe60bc6729b3bcf819b57abfcaba3a93e9edef766c0d499cad3f7adb306bcf1645cfb63400e3L</span><br><span class=\"line\">long_to_bytes(m).encode(&#x27;hex&#x27;)=???</span><br></pre></td></tr></table></figure>\r\n<p>解</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#此函数用于在求出p的低位后求出p</span><br><span class=\"line\">def partial_p(p0, kbits, n):</span><br><span class=\"line\">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\">    nbits = n.nbits()</span><br><span class=\"line\">    f = 2^kbits*x + p0</span><br><span class=\"line\">    f = f.monic()</span><br><span class=\"line\">    roots = f.small_roots(X=2^(nbits//2-kbits), beta=0.3)  # find root &lt; 2^(nbits//2-kbits) with factor &gt;= n^0.3</span><br><span class=\"line\">    if roots:</span><br><span class=\"line\">        x0 = roots[0]</span><br><span class=\"line\">        p = gcd(2^kbits*x0 + p0, n)</span><br><span class=\"line\">        return ZZ(p)</span><br><span class=\"line\">#先通过推导出的公式，由d的低位求得p的低位，再通过上面那个函数求得p</span><br><span class=\"line\">def find_p(d0, kbits, e, n):</span><br><span class=\"line\">    X = var(&#x27;X&#x27;)</span><br><span class=\"line\">    for k in xrange(1, e+1):</span><br><span class=\"line\">        results = solve_mod([e*d0*X - k*X*(n-X+1) + k*n == X], 2^kbits)#公式</span><br><span class=\"line\">        for x in results:</span><br><span class=\"line\">            p0 = ZZ(x[0])</span><br><span class=\"line\">            p = partial_p(p0, kbits, n)</span><br><span class=\"line\">            if p:</span><br><span class=\"line\">                return p</span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    n = </span><br><span class=\"line\">    e = 3</span><br><span class=\"line\">    d = </span><br><span class=\"line\">    beta = 0.5</span><br><span class=\"line\">    epsilon = beta^2/7</span><br><span class=\"line\">    nbits = n.nbits()</span><br><span class=\"line\">    kbits = nbits - d.nbits()-1</span><br><span class=\"line\">    d0 = d &amp; (2^kbits-1)#题目给的d的低位的一般产生形式</span><br><span class=\"line\">    p = find_p(d0, kbits, e, n)</span><br><span class=\"line\">    q = n//p</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">def getFullP(low_p, n):</span><br><span class=\"line\">    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=&#x27;NTL&#x27;)</span><br><span class=\"line\">    p = x*2^512 + low_p</span><br><span class=\"line\">    root = (p-n).monic().small_roots(X = 2^128, beta = 0.4)</span><br><span class=\"line\">    if root:</span><br><span class=\"line\">        return p(root[0])</span><br><span class=\"line\">    return None</span><br><span class=\"line\">    </span><br><span class=\"line\">def phase4(low_d, n, c):</span><br><span class=\"line\">    maybe_p = []</span><br><span class=\"line\">    for k in range(1, 4):</span><br><span class=\"line\">        p = var(&#x27;p&#x27;)</span><br><span class=\"line\">        p0 = solve_mod([3*p*low_d  == p + k*(n*p - p^2 - n + p)], 2^512)</span><br><span class=\"line\">        maybe_p += [int(x[0]) for x in p0]</span><br><span class=\"line\">    print(maybe_p)</span><br><span class=\"line\">    </span><br><span class=\"line\">    for x in maybe_p:</span><br><span class=\"line\">        P = getFullP(x, n)</span><br><span class=\"line\">        if P: break</span><br><span class=\"line\">    </span><br><span class=\"line\">    P = int(P)</span><br><span class=\"line\">    Q = n // P</span><br><span class=\"line\">    </span><br><span class=\"line\">    assert P*Q == n</span><br><span class=\"line\">    </span><br><span class=\"line\">    d = inverse_mod(3, (P-1)*(Q-1))</span><br><span class=\"line\">    print(hex(power_mod(c, d, n))[2:])</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">n = 92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183</span><br><span class=\"line\">c = 56164378185049402404287763972280630295410174183649054805947329504892979921131852321281317326306506444145699012788547718091371389698969718830761120076359634262880912417797038049510647237337251037070369278596191506725812511682495575589039521646062521091457438869068866365907962691742604895495670783101319608530</span><br><span class=\"line\">low_d = 787673996295376297668171075170955852109814939442242049800811601753001897317556022653997651874897208487913321031340711138331360350633965420642045383644955</span><br><span class=\"line\"></span><br><span class=\"line\">phase4(low_d, n, c)</span><br><span class=\"line\"># 464c41477b325e3872736135616230383637343566366563373435363139613862363566653465633536307d</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"原理\">原理</h2>\r\n<p><img src=\"/2024/11/11/Coppersmith%E7%9B%B8%E5%85%B3%E6%94%BB%E5%87%BB/2.png\"></p>\r\n<h1 id=\"related-message-attack\">Related Message Attack</h1>\r\n<p>两条信息满足线性关系</p>\r\n<p>在实际情况中，我们遇到更多的是先对flag{xxxx}进行加密，在对xxxx进行加密，这两次加密的内容是呈线性的</p>\r\n<p>即m与a+m+b，其中m='xxxx'，a=flag{，b=}</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m1 = bytes_to_long(flag)</span><br><span class=\"line\">m2 = a * m1 + b</span><br><span class=\"line\">c1 = pow(m1,e,n)</span><br><span class=\"line\">c2 = pow(a * m1 + b,e,n)</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"例题-2\">例题</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from secret import flag</span><br><span class=\"line\">from Crypto.Util.number import *</span><br><span class=\"line\"></span><br><span class=\"line\">m1 = bytes_to_long(flag)</span><br><span class=\"line\">N = getPrime(512)*getPrime(512)</span><br><span class=\"line\">e = 17</span><br><span class=\"line\"></span><br><span class=\"line\">c1 = pow(m1, e, N)</span><br><span class=\"line\"></span><br><span class=\"line\">a = getRandomNBitInteger(512)</span><br><span class=\"line\">b = getRandomNBitInteger(512)</span><br><span class=\"line\">m2 = a * m1 + b</span><br><span class=\"line\">c2 = pow(m2, e, N)</span><br><span class=\"line\"></span><br><span class=\"line\">print(N, a, b, c1, c2, sep=&quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 51296885372346449295388453471330409021784141081351581975478435681552082076338697136130122011636685327781785488670769096434920591920054441921039812310126089859349902066456998315283909435249794317277620588552441456327265553018986591779396701680997794937951231970194353001576159809798153970829987274504038146741</span><br><span class=\"line\"># 13256631249970000274738888132534852767685499642889351632072622194777502848070957827974250425805779856662241409663031192870528911932663995606616763982320967</span><br><span class=\"line\"># 12614470377409090738391280373352373943201882741276992121990944593827605866548572392808272414120477304486154096358852845785437999246453926812759725932442170</span><br><span class=\"line\"># 18617698095122597355752178584860764221736156139844401400942959000560180868595058572264330257490645079792321778926462300410653970722619332098601515399526245808718518153518824404167374361098424325296872587362792839831578589407441739040578339310283844080111189381106274103089079702496168766831316853664552253142</span><br><span class=\"line\"># 14091361528414093900688440242152327115109256507133728799758289918462970724109343410464537203689727409590796472177295835710571700501895484300979622506298961999001641059179449655629481072402234965831697915939034769804437452528921599125823412464950939837343822566667533463393026895985173157447434429906021792720</span><br></pre></td></tr></table></figure>\r\n<p>题解</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=51296885372346449295388453471330409021784141081351581975478435681552082076338697136130122011636685327781785488670769096434920591920054441921039812310126089859349902066456998315283909435249794317277620588552441456327265553018986591779396701680997794937951231970194353001576159809798153970829987274504038146741</span><br><span class=\"line\">a=13256631249970000274738888132534852767685499642889351632072622194777502848070957827974250425805779856662241409663031192870528911932663995606616763982320967</span><br><span class=\"line\">b=12614470377409090738391280373352373943201882741276992121990944593827605866548572392808272414120477304486154096358852845785437999246453926812759725932442170</span><br><span class=\"line\">c1=18617698095122597355752178584860764221736156139844401400942959000560180868595058572264330257490645079792321778926462300410653970722619332098601515399526245808718518153518824404167374361098424325296872587362792839831578589407441739040578339310283844080111189381106274103089079702496168766831316853664552253142</span><br><span class=\"line\">c2=14091361528414093900688440242152327115109256507133728799758289918462970724109343410464537203689727409590796472177295835710571700501895484300979622506298961999001641059179449655629481072402234965831697915939034769804437452528921599125823412464950939837343822566667533463393026895985173157447434429906021792720</span><br><span class=\"line\">e=17</span><br><span class=\"line\"></span><br><span class=\"line\">import libnum</span><br><span class=\"line\">def franklinReiter(n,e,c1,c2,a,b):</span><br><span class=\"line\">    R.&lt;X&gt; = Zmod(n)[]</span><br><span class=\"line\">    f1 = X^e - c1</span><br><span class=\"line\">    f2 = (X*a+ b)^e - c2</span><br><span class=\"line\">    # coefficient 0 = -m, which is what we wanted!</span><br><span class=\"line\">    return Integer(n-(compositeModulusGCD(f1,f2)).coefficients()[0]) # 系数</span><br><span class=\"line\"></span><br><span class=\"line\">  # GCD is not implemented for rings over composite modulus in Sage</span><br><span class=\"line\">  # so we do our own implementation. Its the exact same as standard GCD, but with</span><br><span class=\"line\">  # the polynomials monic representation</span><br><span class=\"line\">def compositeModulusGCD(a, b):</span><br><span class=\"line\">    if(b == 0):</span><br><span class=\"line\">        return a.monic()</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return compositeModulusGCD(b, a % b)</span><br><span class=\"line\"></span><br><span class=\"line\">m=franklinReiter(n,e,c1,c2,a,b)</span><br><span class=\"line\">print(libnum.n2s(int(m)))</span><br><span class=\"line\"># flag&#123;a593591a-3749-cc52-0c27-e897fac2c967&#125;</span><br></pre></td></tr></table></figure>\r\n<p>或者</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import libnum</span><br><span class=\"line\">n=51296885372346449295388453471330409021784141081351581975478435681552082076338697136130122011636685327781785488670769096434920591920054441921039812310126089859349902066456998315283909435249794317277620588552441456327265553018986591779396701680997794937951231970194353001576159809798153970829987274504038146741</span><br><span class=\"line\">a=13256631249970000274738888132534852767685499642889351632072622194777502848070957827974250425805779856662241409663031192870528911932663995606616763982320967</span><br><span class=\"line\">b=12614470377409090738391280373352373943201882741276992121990944593827605866548572392808272414120477304486154096358852845785437999246453926812759725932442170</span><br><span class=\"line\">c1=18617698095122597355752178584860764221736156139844401400942959000560180868595058572264330257490645079792321778926462300410653970722619332098601515399526245808718518153518824404167374361098424325296872587362792839831578589407441739040578339310283844080111189381106274103089079702496168766831316853664552253142</span><br><span class=\"line\">c2=14091361528414093900688440242152327115109256507133728799758289918462970724109343410464537203689727409590796472177295835710571700501895484300979622506298961999001641059179449655629481072402234965831697915939034769804437452528921599125823412464950939837343822566667533463393026895985173157447434429906021792720</span><br><span class=\"line\">e=17</span><br><span class=\"line\">import binascii</span><br><span class=\"line\">def franklinReiter(n,e,c1,c2,a,b):</span><br><span class=\"line\">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\">    g1 = (x)^e - c1</span><br><span class=\"line\">    g2 = (a*x+b)^e - c2</span><br><span class=\"line\"></span><br><span class=\"line\">    def gcd(g1, g2):</span><br><span class=\"line\">        while g2:</span><br><span class=\"line\">            g1, g2 = g2, g1 % g2</span><br><span class=\"line\">        return g1.monic() # </span><br><span class=\"line\">    return -gcd(g1, g2)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">m=franklinReiter(n,e,c1,c2,a,b)</span><br><span class=\"line\">print(libnum.n2s(int(m)))</span><br><span class=\"line\"># flag&#123;a593591a-3749-cc52-0c27-e897fac2c967&#125;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"boneh-and-durfee-attack\">Boneh and Durfee attack</h1>\r\n<h1 id=\"rsa-padding-attack\">RSA Padding Attack</h1>\r\n",
            "tags": [
                "crypto",
                "coppersmith"
            ]
        }
    ]
}