{
    "version": "https://jsonfeed.org/version/1",
    "title": "sxq • All posts by \"伪随机\" tag",
    "description": "",
    "home_page_url": "https://sxq2003.github.io",
    "items": [
        {
            "id": "https://sxq2003.github.io/2024/11/10/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84Random/",
            "url": "https://sxq2003.github.io/2024/11/10/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84Random/",
            "title": "密码学中的Random",
            "date_published": "2024-11-10T12:08:18.000Z",
            "content_html": "<p>密码学中经常会遇到一类随机数预测的题目，这里来总结一下</p>\r\n<h1 id=\"引出主题gkctf-2021random\">引出主题：[GKCTF 2021]Random</h1>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_mask</span>():</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;random.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">104</span>):</span><br><span class=\"line\">        file.write(<span class=\"built_in\">str</span>(random.getrandbits(<span class=\"number\">32</span>))+<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">        file.write(<span class=\"built_in\">str</span>(random.getrandbits(<span class=\"number\">64</span>))+<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">        file.write(<span class=\"built_in\">str</span>(random.getrandbits(<span class=\"number\">96</span>))+<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\">get_mask()</span><br><span class=\"line\">flag = md5(<span class=\"built_in\">str</span>(random.getrandbits(<span class=\"number\">32</span>)).encode()).hexdigest()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\r\n<p>python中random库使用的是MT19937算法</p>\r\n<h1 id=\"具体原理\">具体原理</h1>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_int32</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(<span class=\"number\">0xFFFFFFFF</span> &amp; x)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MT19937</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 根据seed初始化624的state</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, seed</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.mt = [<span class=\"number\">0</span>] * <span class=\"number\">624</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.mt[<span class=\"number\">0</span>] = seed</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.mti = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">624</span>):</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.mt[i] = _int32(<span class=\"number\">1812433253</span> * (<span class=\"variable language_\">self</span>.mt[i - <span class=\"number\">1</span>] ^ <span class=\"variable language_\">self</span>.mt[i - <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">30</span>) + i)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 提取伪随机数</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">extract_number</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.mti == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.twist()</span><br><span class=\"line\">        y = <span class=\"variable language_\">self</span>.mt[<span class=\"variable language_\">self</span>.mti]</span><br><span class=\"line\">        y = y ^ y &gt;&gt; <span class=\"number\">11</span></span><br><span class=\"line\">        y = y ^ y &lt;&lt; <span class=\"number\">7</span> &amp; <span class=\"number\">2636928640</span></span><br><span class=\"line\">        y = y ^ y &lt;&lt; <span class=\"number\">15</span> &amp; <span class=\"number\">4022730752</span></span><br><span class=\"line\">        y = y ^ y &gt;&gt; <span class=\"number\">18</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.mti = (<span class=\"variable language_\">self</span>.mti + <span class=\"number\">1</span>) % <span class=\"number\">624</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _int32(y)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"># 对状态进行旋转</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">twist</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">624</span>):</span><br><span class=\"line\">            y = _int32((<span class=\"variable language_\">self</span>.mt[i] &amp; <span class=\"number\">0x80000000</span>) + (<span class=\"variable language_\">self</span>.mt[(i + <span class=\"number\">1</span>) % <span class=\"number\">624</span>] &amp; <span class=\"number\">0x7fffffff</span>))</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.mt[i] = (y &gt;&gt; <span class=\"number\">1</span>) ^ <span class=\"variable language_\">self</span>.mt[(i + <span class=\"number\">397</span>) % <span class=\"number\">624</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> y % <span class=\"number\">2</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.mt[i] = <span class=\"variable language_\">self</span>.mt[i] ^ <span class=\"number\">0x9908b0df</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<figure>\r\n<img src=\"/2024/11/10/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84Random/images\\密码学中的Random\\1.png\" alt=\"1\"><figcaption aria-hidden=\"true\">1</figcaption>\r\n</figure>\r\n<p>上面一大堆话，总结一下就是<strong>如果能获取前624个32位的随机数，就能预测出后面全部32位的随机数</strong>。</p>\r\n<p>random的随机数以32位为一个单位，所以如果要产生一个64位的随机数，则等价于一次产生两个32位随机数a,b，并将b&lt;&lt;32+a作为这个64位随机数。同理，96位随机数=产生a,b,c，c&lt;&lt;64+b&lt;&lt;32+a。</p>\r\n<p>本题中已知的随机数有104*(1+2+3)=624个，刚好满足能够预测的条件，需要我们预测出下一个。</p>\r\n<p>至于如何预测，有多种方法</p>\r\n<h2 id=\"解法一randcrack\">解法一：randcrack</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"><span class=\"keyword\">from</span> randcrack <span class=\"keyword\">import</span> RandCrack</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&#x27;random.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:  <span class=\"comment\">#读入数据</span></span><br><span class=\"line\">    l = f.readlines()</span><br><span class=\"line\">l = [<span class=\"built_in\">int</span>(i.strip()) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> l]</span><br><span class=\"line\">t = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(l)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i % <span class=\"number\">3</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        t.append(l[i])\t<span class=\"comment\">#32位长度直接存入</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i % <span class=\"number\">3</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>)) \t<span class=\"comment\">#64位长度先存入低32位</span></span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">32</span>)\t\t\t\t\t<span class=\"comment\">#再存入高32位</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>))\t<span class=\"comment\">#96位的低32位</span></span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">64</span> - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">32</span>)\t<span class=\"comment\">#中间32位</span></span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">64</span>)\t<span class=\"comment\">#高32位</span></span><br><span class=\"line\">rc = RandCrack()\t<span class=\"comment\">#创建一个预测器</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">    rc.submit(i)\t<span class=\"comment\">#把每个数据都丢进预测器里</span></span><br><span class=\"line\">flag = rc.predict_getrandbits(<span class=\"number\">32</span>)\t<span class=\"comment\">#预测的下一个32位</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(md5(<span class=\"built_in\">str</span>(flag).encode()).hexdigest())</span><br><span class=\"line\"><span class=\"comment\">#注意顺序很重要</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"解法二逆向\">解法二：逆向</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!python3</span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Time : 2020/10/25 21:59</span></span><br><span class=\"line\"><span class=\"comment\"># @Author : A.James</span></span><br><span class=\"line\"><span class=\"comment\"># @FileName: exp2.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> Random</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># right shift inverse</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inverse_right</span>(<span class=\"params\">res,shift,bits=<span class=\"number\">32</span></span>):</span><br><span class=\"line\">    tmp = res</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(bits//shift):</span><br><span class=\"line\">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># right shift with mask inverse</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inverse_right_values</span>(<span class=\"params\">res,shift,mask,bits=<span class=\"number\">32</span></span>):</span><br><span class=\"line\">    tmp = res</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(bits//shift):</span><br><span class=\"line\">        tmp = res ^ tmp&gt;&gt;shift &amp; mask</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># left shift inverse</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inverse_left</span>(<span class=\"params\">res,shift,bits=<span class=\"number\">32</span></span>):</span><br><span class=\"line\">    tmp = res</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(bits//shift):</span><br><span class=\"line\">        tmp = res ^ tmp &lt;&lt; shift</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># left shift with mask inverse</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inverse_left_values</span>(<span class=\"params\">res,shift,mask,bits=<span class=\"number\">32</span></span>):</span><br><span class=\"line\">    tmp = res</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(bits//shift):</span><br><span class=\"line\">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">backtrace</span>(<span class=\"params\">cur</span>):</span><br><span class=\"line\">    high = <span class=\"number\">0x80000000</span></span><br><span class=\"line\">    low = <span class=\"number\">0x7fffffff</span></span><br><span class=\"line\">    mask = <span class=\"number\">0x9908b0df</span></span><br><span class=\"line\">    state = cur</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">        tmp = state[i+<span class=\"number\">624</span>]^state[i+<span class=\"number\">397</span>]</span><br><span class=\"line\">        <span class=\"comment\"># recover Y,tmp = Y</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &amp; high == high:</span><br><span class=\"line\">            tmp ^= mask</span><br><span class=\"line\">            tmp &lt;&lt;= <span class=\"number\">1</span></span><br><span class=\"line\">            tmp |= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            tmp &lt;&lt;=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># recover highest bit</span></span><br><span class=\"line\">        res = tmp&amp;high</span><br><span class=\"line\">        <span class=\"comment\"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span></span><br><span class=\"line\">        tmp = state[i-<span class=\"number\">1</span>+<span class=\"number\">624</span>]^state[i+<span class=\"number\">396</span>]</span><br><span class=\"line\">        <span class=\"comment\"># recover Y,tmp = Y</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &amp; high == high:</span><br><span class=\"line\">            tmp ^= mask</span><br><span class=\"line\">            tmp &lt;&lt;= <span class=\"number\">1</span></span><br><span class=\"line\">            tmp |= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            tmp &lt;&lt;=<span class=\"number\">1</span></span><br><span class=\"line\">        res |= (tmp)&amp;low</span><br><span class=\"line\">        state[i] = res</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">recover_state</span>(<span class=\"params\">out</span>):</span><br><span class=\"line\">    state = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> out:</span><br><span class=\"line\">        i = inverse_right(i,<span class=\"number\">18</span>)</span><br><span class=\"line\">        i = inverse_left_values(i,<span class=\"number\">15</span>,<span class=\"number\">0xefc60000</span>)</span><br><span class=\"line\">        i = inverse_left_values(i,<span class=\"number\">7</span>,<span class=\"number\">0x9d2c5680</span>)</span><br><span class=\"line\">        i = inverse_right(i,<span class=\"number\">11</span>)</span><br><span class=\"line\">        state.append(i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\"></span><br><span class=\"line\">l = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;sgcc.txt&#x27;</span>,<span class=\"string\">&#x27;r&#x27;</span>).readlines()</span><br><span class=\"line\">l = [<span class=\"built_in\">int</span>(i.strip()) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> l]</span><br><span class=\"line\"><span class=\"comment\">#print(l)</span></span><br><span class=\"line\"></span><br><span class=\"line\">t = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(l)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i % <span class=\"number\">4</span> == <span class=\"number\">0</span>:<span class=\"comment\"># 32</span></span><br><span class=\"line\">        t.append(l[i])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i % <span class=\"number\">4</span> == <span class=\"number\">1</span>: <span class=\"comment\">#64</span></span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>))</span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">32</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i % <span class=\"number\">4</span> == <span class=\"number\">2</span>: <span class=\"comment\">#96</span></span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>))</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">64</span> - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">32</span>)</span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">64</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> :<span class=\"comment\">#128</span></span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>))</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">64</span> - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">32</span>)</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">96</span> - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">64</span>)</span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">96</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">partS = recover_state(t)</span><br><span class=\"line\">state = backtrace(partS+[<span class=\"number\">0</span>])[-<span class=\"number\">624</span>:] <span class=\"comment\">##获取后624位随机数</span></span><br><span class=\"line\">prng = Random()</span><br><span class=\"line\">prng.setstate((<span class=\"number\">3</span>,<span class=\"built_in\">tuple</span>(state+[<span class=\"number\">624</span>]),<span class=\"literal\">None</span>))</span><br><span class=\"line\">flag = md5(<span class=\"built_in\">str</span>(prng.getrandbits(<span class=\"number\">32</span>)).encode()).hexdigest()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"解法三mt19937predictor\">解法三：mt19937predictor</h2>\r\n<p>和randcrack差不多</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> mt19937predictor <span class=\"keyword\">import</span> MT19937Predictor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">r&#x27;random.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:  <span class=\"comment\">#读入数据</span></span><br><span class=\"line\">    l = f.readlines()</span><br><span class=\"line\">l = [<span class=\"built_in\">int</span>(i.strip()) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> l]</span><br><span class=\"line\">t = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(l)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i % <span class=\"number\">3</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        t.append(l[i])\t<span class=\"comment\">#32位长度直接存入</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i % <span class=\"number\">3</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>)) \t<span class=\"comment\">#64位长度先存入低32位</span></span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">32</span>)\t\t\t\t\t<span class=\"comment\">#再存入高32位</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">32</span> - <span class=\"number\">1</span>))\t<span class=\"comment\">#96位的低32位</span></span><br><span class=\"line\">        t.append(l[i] &amp; (<span class=\"number\">2</span> ** <span class=\"number\">64</span> - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">32</span>)\t<span class=\"comment\">#中间32位</span></span><br><span class=\"line\">        t.append(l[i] &gt;&gt; <span class=\"number\">64</span>)\t<span class=\"comment\">#高32位</span></span><br><span class=\"line\"></span><br><span class=\"line\">predictor = MT19937Predictor()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">    predictor.setrandbits(i, <span class=\"number\">32</span>)</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"扩展求前随机数\">扩展：求前随机数</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> extend_mt19937_predictor <span class=\"keyword\">import</span> ExtendMT19937Predictor</span><br><span class=\"line\"></span><br><span class=\"line\">numbers = [random.getrandbits(<span class=\"number\">64</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1024</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">predictor = ExtendMT19937Predictor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">78</span>):</span><br><span class=\"line\">    predictor.setrandbits(random.getrandbits(<span class=\"number\">256</span>), <span class=\"number\">256</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">_ = [predictor.backtrack_getrandbits(<span class=\"number\">256</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">78</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> numbers[::-<span class=\"number\">1</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> x == predictor.backtrack_getrandbits(<span class=\"number\">64</span>)</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"更多题目\">更多题目</h1>\r\n<p>数据： <a href=\"..\\images\\密码学中的Random\\output.zip\">output.zip</a></p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;output.bin&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(random.randbytes(<span class=\"number\">2500</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;HITCTF2023&#123;%s&#125;&#x27;</span> % random.randbytes(<span class=\"number\">16</span>).<span class=\"built_in\">hex</span>())</span><br></pre></td></tr></table></figure>\r\n<p>题目已知产生了2500个byte，一个byte是8位，也就是说4个byte组成一个32位随机数，2500/4=625&gt;624，满足预测条件</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> mt19937predictor <span class=\"keyword\">import</span> MT19937Predictor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#读取数据，并4个一组组成一个32位随机数(little是重点)</span></span><br><span class=\"line\">c = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;output.bin&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>).read()</span><br><span class=\"line\">c = [c[x:x+<span class=\"number\">4</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(c), <span class=\"number\">4</span>)]</span><br><span class=\"line\">c = [<span class=\"built_in\">int</span>.from_bytes(x, <span class=\"string\">&#x27;little&#x27;</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> c]</span><br><span class=\"line\"></span><br><span class=\"line\">predictor = MT19937Predictor()</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> c[:<span class=\"number\">624</span>]:</span><br><span class=\"line\">\tpredictor.setrandbits(x, <span class=\"number\">32</span>) <span class=\"comment\">#只需要624组数据就行</span></span><br><span class=\"line\"><span class=\"keyword\">assert</span> predictor.getrandbits(<span class=\"number\">32</span>) == c[-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;HITCTF2023&#123;%s&#125;&#x27;</span> % predictor.randbytes(<span class=\"number\">16</span>).<span class=\"built_in\">hex</span>())</span><br><span class=\"line\"><span class=\"comment\"># HITCTF2023&#123;d6712c20657ce5e02118f8592b7da71f&#125;</span></span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "crypto",
                "伪随机"
            ]
        }
    ]
}